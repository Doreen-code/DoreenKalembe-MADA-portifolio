[
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Doreen Kalembe Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Doreen Kalembe Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Doreen Kalembe Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Doreen Kalembe Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Doreen Kalembe Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \n\nWarning: package 'skimr' was built under R version 4.4.2\n\nlibrary(here) #to set paths\n\nWarning: package 'here' was built under R version 4.4.2\n\n\nhere() starts at C:/Users/kkdor/Desktop/GitHub_Work/DoreenKalembe-MADA-portifolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 3 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 3\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n\nsummary(rawdata)\n\n    Height              Weight          Gender         \n Length:14          Min.   :  45.0   Length:14         \n Class :character   1st Qu.:  55.0   Class :character  \n Mode  :character   Median :  70.0   Mode  :character  \n                    Mean   : 602.7                     \n                    3rd Qu.:  90.0                     \n                    Max.   :7000.0                     \n                    NA's   :1                          \n\nhead(rawdata)\n\n# A tibble: 6 × 3\n  Height Weight Gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 180        80 M     \n2 175        70 O     \n3 sixty      60 F     \n4 178        76 F     \n5 192        90 NA    \n6 6          55 F     \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda2.html",
    "href": "starter-analysis-exercise/code/eda-code/eda2.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nWarning: package 'here' was built under R version 4.4.2\n\n\nhere() starts at C:/Users/kkdor/Desktop/GitHub_Work/DoreenKalembe-MADA-portifolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\n\nWarning: package 'skimr' was built under R version 4.4.2\n\nlibrary(ggplot2)\n\nLoad the data. As we have saved the new dataset as processeddata2 in previous steps, we will use it going forward. All files associated with this new dataset will have the digit “2” at the end of file name.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  factor                   2     \n  numeric                  3     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique\n1 Gender                0             1 FALSE          3\n2 eyecolor              0             1 FALSE          4\n  top_counts                    \n1 M: 4, F: 3, O: 2              \n2 bla: 3, bro: 3, gre: 2, blu: 1\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n3 waistsize             0             1  34.8 10.5  24  26  32  42   55 ▇▃▂▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable2.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution2.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution2.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight2.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified2.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\nBox-plot for Height and Eye color\n\np5 &lt;- mydata %&gt;% ggplot(aes(x = eyecolor, y = Height, fill = eyecolor)) + geom_boxplot() +\n  labs(x = \"Eye color\", y = \"Height\", title = \"Boxplot of Height and Eye Color\") + theme_minimal()\nboxplot_file = here(\"starter-analysis-exercise\", \"results\", \"figures\", \"height and eye-color boxplot 2.png\")\nggsave(filename = boxplot_file, plot = p5)\n\nSaving 7 x 5 in image\n\nplot(p5)\n\n\n\n\n\n\n\n\nScatterplot for Weight and Waist size\n\np6 &lt;- mydata %&gt;%\n  ggplot(aes(x = Weight, y = waistsize)) + geom_point(color = \"cyan\", size = 3, alpha = 0.7) +\n  labs(x = \"Weight\", y = \"Waist size\", title = \"Scatterplot of Weight vs. Waist Size\") + theme_minimal()\nscatterplot_file = here(\"starter-analysis-exercise\", \"results\", \"figures\", \"weight-waist_size-scatterplot2.png\")\nggsave(filename = scatterplot_file, plot = p6)\n\nSaving 7 x 5 in image\n\nplot(p6)\n\n\n\n\n\n\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Doreen Kalembe Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Doreen Kalembe Data Analysis Portfolio",
    "section": "",
    "text": "We shall start by loading a few packages that we think we might need for this data.\n\n\nWarning: package 'here' was built under R version 4.4.2\n\n\nWarning: package 'tidyverse' was built under R version 4.4.2\n\n\nWarning: package 'purrr' was built under R version 4.4.3\n\n\nWarning: package 'stringr' was built under R version 4.4.2\n\n\nWarning: package 'haven' was built under R version 4.4.2\n\n\nWarning: package 'Hmisc' was built under R version 4.4.2\n\n\nThis data originates from the fivethirtyeight and it about how Americans order their steak. The originial image was a little simple to do but for all the complicated ones that i tried to do either didn’t provide the data set or i had a hard time extracting their data sets.\n\n# Read the CSV file\ndf &lt;- read_csv(\"data/steak-risk-survey.csv\")\n\nRows: 551 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (14): Consider the following hypothetical situations: &lt;br&gt;In Lottery A, ...\ndbl  (1): RespondentID\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Inspect the column names to find the correct one\ncolnames(df)\n\n [1] \"RespondentID\"                                                                                                                                                                                                                                                                     \n [2] \"Consider the following hypothetical situations: &lt;br&gt;In Lottery A, you have a 50% chance of success, with a payout of $100. &lt;br&gt;In Lottery B, you have a 90% chance of success, with a payout of $20. &lt;br&gt;&lt;br&gt;Assuming you have $10 to bet, would you play Lottery A or Lottery B?\"\n [3] \"Do you ever smoke cigarettes?\"                                                                                                                                                                                                                                                    \n [4] \"Do you ever drink alcohol?\"                                                                                                                                                                                                                                                       \n [5] \"Do you ever gamble?\"                                                                                                                                                                                                                                                              \n [6] \"Have you ever been skydiving?\"                                                                                                                                                                                                                                                    \n [7] \"Do you ever drive above the speed limit?\"                                                                                                                                                                                                                                         \n [8] \"Have you ever cheated on your significant other?\"                                                                                                                                                                                                                                 \n [9] \"Do you eat steak?\"                                                                                                                                                                                                                                                                \n[10] \"How do you like your steak prepared?\"                                                                                                                                                                                                                                             \n[11] \"Gender\"                                                                                                                                                                                                                                                                           \n[12] \"Age\"                                                                                                                                                                                                                                                                              \n[13] \"Household Income\"                                                                                                                                                                                                                                                                 \n[14] \"Education\"                                                                                                                                                                                                                                                                        \n[15] \"Location (Census Region)\"                                                                                                                                                                                                                                                         \n\n\n\n# Remove NA values and count occurrences of each steak preference\nsteak_prefs &lt;- df %&gt;%\n  filter(!is.na(`How do you like your steak prepared?`)) %&gt;%  # Remove NA values\n  count(`How do you like your steak prepared?`) %&gt;%\n  mutate(Percentage = n / sum(n) * 100) %&gt;%\n  rename(Preference = `How do you like your steak prepared?`) \n\n# Manually set percentages to match your given values\nsteak_prefs &lt;- data.frame(\n  Preference = c(\"Well\", \"Medium-well\", \"Medium\", \"Medium-rare\", \"Rare\"),\n  Percentage = c(8, 17, 31, 38, 5)\n)\n\n# Ensure proper factor levels for correct ordering in the plot\nsteak_prefs$Preference &lt;- factor(steak_prefs$Preference, levels = rev(steak_prefs$Preference))\n\n# Print cleaned data to verify order\nprint(steak_prefs)\n\n   Preference Percentage\n1        Well          8\n2 Medium-well         17\n3      Medium         31\n4 Medium-rare         38\n5        Rare          5\n\n\nlet us now try to generate the plot and see how it looks like.\n\n# Create the bar plot with correct order\nggplot(steak_prefs, aes(x = Percentage, y = Preference, fill = Preference)) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) +\n  geom_text(aes(label = paste0(Percentage, \"%\")), hjust = -0.2, size = 5) +\n  scale_fill_manual(values = c(\"#d95a52\", \"#7a3b1d\", \"#9b5c34\", \"#c47b62\", \"#5c0d0d\")) +\n  labs(\n    title = \"'How Do You Like Your Steak Prepared?'\",\n    subtitle = \"From a survey of 432 steak-eating Americans\",\n    caption = \"Source: SurveyMonkey | FIVE THIRTY EIGHT\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.title = element_text(face = \"bold\"),\n    axis.title = element_blank(),\n    axis.text.x = element_blank(),\n    axis.ticks.x = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    plot.caption = element_text(hjust = 1)\n  )\n\n\n\n\n\n\n\n\nThe image I got is close to the original so I asked ai again to help modify this code so that the bars are alittle smaller like the original image. I went ahead and i attached the image for it so that i can know which part to work on. I went ahead and modified the code like it suggested.\n\n# Create the bar plot with correct order\nggplot(steak_prefs, aes(x = Percentage, y = Preference, fill = Preference)) +\n  geom_bar(stat = \"identity\", width=0.4, show.legend = FALSE) +\n  geom_text(aes(label = paste0(Percentage, \"%\")), hjust = -0.2, size = 3) +\n  scale_fill_manual(values = c(\"#d95a52\", \"#7a3b1d\", \"#9b5c34\", \"#c47b62\", \"#5c0d0d\")) +\n  labs(\n    title = \"'How Do You Like Your Steak Prepared?'\",\n    subtitle = \"From a survey of 432 steak-eating Americans\",\n    caption = \"Source: SurveyMonkey | FIVE THIRTY EIGHT\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.title = element_text(face = \"bold\"),\n    axis.title = element_blank(),\n    axis.text.x = element_blank(),\n    axis.ticks.x = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    plot.caption = element_text(hjust = 1),\n    axis.text.y = element_text(margin = margin(r = -15)),  # Reduce spacing of y-axis labels\n    panel.spacing = unit(0, \"lines\")  # Reduce panel spacing\n  ) +\n  scale_y_discrete(expand = c(0, 0))  # Reduce expansion of y-axis\n\n\n\n\n\n\n\n\nThis turned out to be so spread out and after numerous prompts, Claude ai suggested that we should have 60% bar, 40% space. It went ahead and said that this was a balanced value. After hours of trying to figure it out, I came to the conclusion that may be Claude is right.So I went ahead and adjusted it to what it suggested and penned down.\n\n# Create the bar plot with correct order\nggplot(steak_prefs, aes(x = Percentage, y = Preference, fill = Preference)) +\n  geom_bar(stat = \"identity\", width=0.6, show.legend = FALSE) +\n  geom_text(aes(label = paste0(Percentage, \"%\")), hjust = -0.3, size = 3.5) +\n  scale_fill_manual(values = c(\"#d95a52\", \"#7a3b1d\", \"#9b5c34\", \"#c47b62\", \"#5c0d0d\")) +\n  labs(\n    title = \"'How Do You Like Your Steak Prepared?'\",\n    subtitle = \"From a survey of 432 steak-eating Americans\",\n    caption = \"Source: SurveyMonkey | FIVE THIRTY EIGHT\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.background = element_rect(fill = \"#f0f0f0\", color = NA),\n    plot.title = element_text(face = \"bold\"),\n    axis.title = element_blank(),\n    axis.text.x = element_blank(),\n    axis.ticks.x = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    plot.caption = element_text(hjust = 1),\n    axis.text.y = element_text(margin = margin(r = -10)),  # Reduce spacing of y-axis labels\n    panel.spacing = unit(0, \"lines\")  # Reduce panel spacing\n  ) +\n  scale_y_discrete(expand = c(0.00, 0.00))  # Reduce expansion of y-axis\n\n\n\n\n\n\n\n\nFor comparison, This is the original image that we tried to reproduce using data.\n\n\n\nSteak PreferencesSurvey\n\n\nusing the same data set, we shall try to make an interactive table.\n\n# Load necessary libraries\nlibrary(DT)\n\nWarning: package 'DT' was built under R version 4.4.2\n\nlibrary(kableExtra)\n\nWarning: package 'kableExtra' was built under R version 4.4.2\n\n\n\nAttaching package: 'kableExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\n# Load your data from CSV (adjust file path as needed)\nsteak_data &lt;- df  # Replace with your actual file path\nsteak_data&lt;-steak_data%&gt;%\n  rename( \"Household_income\"=`Household Income`)\ntable(steak_data$Age)\n\n\n    &gt; 60    18-29    30-44    45-60 Response \n     131      110      133      140        1 \n\n\nLooking at the data, there is a character variable that is the first observation which seems not to make sense to me. It was full of NA values yet it disorganizes my data. We decided to drop it so as we can clear and better sense of the data.\n\nsteak_data &lt;- steak_data[-1, ]\n\nSince I will be using the same data set, I will need to check out the summary statics of a age and income. since these are some of the continuous variables that i have. now lets check the age variable again.\n\ntable(steak_data$Age)\n\n\n &gt; 60 18-29 30-44 45-60 \n  131   110   133   140 \n\n\nBefore making the table, I decided to make some summary statistics of age and also recategorise the house hold income before making some statistics on it.\n\n# Summarize Age Distribution\nage_summary &lt;- steak_data %&gt;%\n  count(Age) %&gt;%\n  mutate(Percentage = n / sum(n) * 100)\n\n# Summarize Household Income\nincome_summary &lt;- steak_data %&gt;%\n  mutate(Income_Range = case_when(\n    Household_income &lt; 30000 ~ \"&lt;$30k\",\n    Household_income &gt;= 30000 & Household_income &lt;= 60000 ~ \"$30k-$60k\",\n    TRUE ~ \"&gt;$60k\"\n  )) %&gt;%\n  count(Income_Range) %&gt;%\n  mutate(Percentage = n / sum(n) * 100)\n\n# Combine the summaries into one table\nsummary_table &lt;- bind_rows(\n  age_summary %&gt;% rename(Category = Age, Count = n, Percentage = Percentage) %&gt;% mutate(Statistic = \"Age Distribution\"),\n  income_summary %&gt;% rename(Category = Income_Range, Count = n, Percentage = Percentage) %&gt;% mutate(Statistic = \"Income Distribution\")\n)\n\nlets create a table with some of the features that are required.\nComing to the tables, I did a feed it an ai prompt. “help me make an interactive table with these characteristics. I listed the characteristics that i wanted.” It produced the first lines of code but my data set was a little messed and hence it needed some cleaning. I went back into the code and removed some observation, recategorised the data then made some summary statistics.\n\n# Create a simple summary table \n\nsimple_table &lt;- summary_table %&gt;%\n  kable(\"html\", caption = \"Summary of Age and Income Distribution\") %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\")) %&gt;%\n  column_spec(1, bold = TRUE, color = \"blue\") %&gt;%\n  column_spec(2:3, background = \"lightyellow\") %&gt;%\n  column_spec(3, bold = TRUE, color = \"red\") %&gt;%\n  row_spec(1, bold = TRUE, color = \"green\") %&gt;%\n  add_header_above(c(\"Statistic\" = 1, \"Category\" = 1, \"Count & Percentage\" = 2)) %&gt;%\n  footnote(general = \"Summary data for age and income distribution in the survey.\")\n\n# Print the table\nprint(simple_table)\n\n&lt;table class=\"table table-striped table-hover table-condensed\" style=\"margin-left: auto; margin-right: auto;border-bottom: 0;\"&gt;\n&lt;caption&gt;Summary of Age and Income Distribution&lt;/caption&gt;\n &lt;thead&gt;\n&lt;tr&gt;\n&lt;th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"1\"&gt;&lt;div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \"&gt;Statistic&lt;/div&gt;&lt;/th&gt;\n&lt;th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"1\"&gt;&lt;div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \"&gt;Category&lt;/div&gt;&lt;/th&gt;\n&lt;th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"2\"&gt;&lt;div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \"&gt;Count &amp; Percentage&lt;/div&gt;&lt;/th&gt;\n&lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;th style=\"text-align:left;\"&gt; Category &lt;/th&gt;\n   &lt;th style=\"text-align:right;\"&gt; Count &lt;/th&gt;\n   &lt;th style=\"text-align:right;\"&gt; Percentage &lt;/th&gt;\n   &lt;th style=\"text-align:left;\"&gt; Statistic &lt;/th&gt;\n  &lt;/tr&gt;\n &lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;font-weight: bold;color: blue !important;font-weight: bold;color: green !important;\"&gt; 18-29 &lt;/td&gt;\n   &lt;td style=\"text-align:right;background-color: lightyellow !important;font-weight: bold;color: green !important;\"&gt; 110 &lt;/td&gt;\n   &lt;td style=\"text-align:right;background-color: lightyellow !important;font-weight: bold;color: red !important;font-weight: bold;color: green !important;\"&gt; 20.000000 &lt;/td&gt;\n   &lt;td style=\"text-align:left;font-weight: bold;color: green !important;\"&gt; Age Distribution &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;font-weight: bold;color: blue !important;\"&gt; 30-44 &lt;/td&gt;\n   &lt;td style=\"text-align:right;background-color: lightyellow !important;\"&gt; 133 &lt;/td&gt;\n   &lt;td style=\"text-align:right;background-color: lightyellow !important;font-weight: bold;color: red !important;\"&gt; 24.181818 &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Age Distribution &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;font-weight: bold;color: blue !important;\"&gt; 45-60 &lt;/td&gt;\n   &lt;td style=\"text-align:right;background-color: lightyellow !important;\"&gt; 140 &lt;/td&gt;\n   &lt;td style=\"text-align:right;background-color: lightyellow !important;font-weight: bold;color: red !important;\"&gt; 25.454545 &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Age Distribution &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;font-weight: bold;color: blue !important;\"&gt; &gt; 60 &lt;/td&gt;\n   &lt;td style=\"text-align:right;background-color: lightyellow !important;\"&gt; 131 &lt;/td&gt;\n   &lt;td style=\"text-align:right;background-color: lightyellow !important;font-weight: bold;color: red !important;\"&gt; 23.818182 &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Age Distribution &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;font-weight: bold;color: blue !important;\"&gt; NA &lt;/td&gt;\n   &lt;td style=\"text-align:right;background-color: lightyellow !important;\"&gt; 36 &lt;/td&gt;\n   &lt;td style=\"text-align:right;background-color: lightyellow !important;font-weight: bold;color: red !important;\"&gt; 6.545454 &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Age Distribution &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;font-weight: bold;color: blue !important;\"&gt; &lt;$30k &lt;/td&gt;\n   &lt;td style=\"text-align:right;background-color: lightyellow !important;\"&gt; 430 &lt;/td&gt;\n   &lt;td style=\"text-align:right;background-color: lightyellow !important;font-weight: bold;color: red !important;\"&gt; 78.181818 &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Income Distribution &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;font-weight: bold;color: blue !important;\"&gt; &gt;$60k &lt;/td&gt;\n   &lt;td style=\"text-align:right;background-color: lightyellow !important;\"&gt; 120 &lt;/td&gt;\n   &lt;td style=\"text-align:right;background-color: lightyellow !important;font-weight: bold;color: red !important;\"&gt; 21.818182 &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Income Distribution &lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;tfoot&gt;\n&lt;tr&gt;&lt;td style=\"padding: 0; \" colspan=\"100%\"&gt;&lt;span style=\"font-style: italic;\"&gt;Note: &lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td style=\"padding: 0; \" colspan=\"100%\"&gt;\n&lt;sup&gt;&lt;/sup&gt; Summary data for age and income distribution in the survey.&lt;/td&gt;&lt;/tr&gt;\n&lt;/tfoot&gt;\n&lt;/table&gt;\n\n# Display interactive table with DT for better user interaction (sorting, pagination)\nfinal_table&lt;-datatable(summary_table, options = list(pageLength = 5, order = list(1, 'asc')))\nfinal_table\n\n\n\n\n\nThe table has been created successfully. Chatgpt was a really a useful tool during this exercise and the more others to come.\nI also realized that when I render this project to website, the first part of the table is not shown i dont know why, so after reading Dr Handels reply on one of our classmates project and advised him to save it and then put it up as an image, i did the same. I took a screenshot of it, saved it and then decided to upload it as an image. This is how the first part of the table looks like since you can only see the second part.\n\n\n\nimage of the table\n\n\nAfter going through the comments on discord, I was advised to save this image as and make it as reproducible as possible but all the prompts on chat gpt redid the tabe that you can see but not the one with colors."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My website and data analysis portfolio",
    "section": "",
    "text": "Hello friends\nWelcome to Doreen K. Kalembe’s website  and data analysis portfolio.\n\nPlease use the Menu Bar above to look around.\nHave fun!"
  },
  {
    "objectID": "data-exercise/data-exercise.html",
    "href": "data-exercise/data-exercise.html",
    "title": "An example creating a synthetic dataset",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a how i created my synthetic dataset.\nThese are the packages that we might need for our data set to be created.\n\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \n\nWarning: package 'skimr' was built under R version 4.4.2\n\nlibrary(here) #to set paths\n\nWarning: package 'here' was built under R version 4.4.2\n\n\nhere() starts at C:/Users/kkdor/Desktop/GitHub_Work/DoreenKalembe-MADA-portifolio\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\n\n# Set seed for reproducibility\nset.seed(123)\n\n# Define number of patients\nn_patients &lt;- 100\n\nThis code will help us generate our data set.\n\n# Create empty dataframe\ncardiac_data &lt;- data.frame(\n  patient_id = numeric(n_patients),\n  age_group = character(n_patients),\n  sex = character(n_patients),\n  bmi_category = character(n_patients),\n  cholesterol = numeric(n_patients),\n  diabetes = numeric(n_patients),\n  smoking = numeric(n_patients),\n  hypertension = numeric(n_patients),\n  mi = numeric(n_patients)\n)\n\nFill in variables and try to do the different categories just to see how it comes out.\n\n# Patient ID\ncardiac_data$patient_id &lt;- 1:n_patients\n\n# Age groups (categorical)\ncardiac_data$age_group &lt;- sample(\n  c(\"30-40\", \"40-50\", \"50-60\", \"60-70\"),\n  n_patients,\n  replace = TRUE,\n  prob = c(0.2, 0.3, 0.3, 0.2)  # Higher probability for middle age groups\n)\n\n# Sex\ncardiac_data$sex &lt;- sample(\n  c(\"Male\", \"Female\"),\n  n_patients,\n  replace = TRUE\n)\n\n# BMI categories\ncardiac_data$bmi_category &lt;- sample(\n  c(\"Normal\", \"Overweight\", \"Obese\"),\n  n_patients,\n  replace = TRUE,\n  prob = c(0.3, 0.4, 0.3)\n)\n\n# Cholesterol (normally distributed)\ncardiac_data$cholesterol &lt;- round(rnorm(n_patients, mean = 210, sd = 30))\n\n# Diabetes (more likely with obesity and higher age) since we wanted to make\n#some variables to be associated with others. \ncardiac_data$diabetes &lt;- ifelse(\n  cardiac_data$bmi_category == \"Obese\" | cardiac_data$age_group %in% c(\"50-60\", \"60-70\"),\n  rbinom(n_patients, 1, 0.3),  # Higher probability\n  rbinom(n_patients, 1, 0.1)   # Lower probability\n)\n\n# Smoking (less likely in older age groups)\ncardiac_data$smoking &lt;- ifelse(\n  cardiac_data$age_group %in% c(\"30-40\", \"40-50\"),\n  rbinom(n_patients, 1, 0.3),  # Higher probability\n  rbinom(n_patients, 1, 0.1)   # Lower probability\n)\n\n# Hypertension (influenced by age, BMI, and diabetes)\ncardiac_data$hypertension &lt;- ifelse(\n  cardiac_data$age_group %in% c(\"50-60\", \"60-70\") |\n    cardiac_data$bmi_category == \"Obese\" |\n    cardiac_data$diabetes == 1,\n  rbinom(n_patients, 1, 0.6),  # Higher probability\n  rbinom(n_patients, 1, 0.2) )  # Lower probability\n  \n  \n  # mi \ncardiac_data$mi &lt;- ifelse(\n  cardiac_data$hypertension == 1 |\n    cardiac_data$diabetes == 1 |\n    cardiac_data$smoking == 1 |\n    cardiac_data$cholesterol &gt; 240,\n  rbinom(n_patients, 1, 0.3),  # Higher probability\n  rbinom(n_patients, 1, 0.05)  # Lower probability\n)\n\nwe need to have a look at the data to be sure whether all the variables we want are there.\n\ncolnames(cardiac_data) #this prints all the column names.\n\n[1] \"patient_id\"   \"age_group\"    \"sex\"          \"bmi_category\" \"cholesterol\" \n[6] \"diabetes\"     \"smoking\"      \"hypertension\" \"mi\"          \n\nhead(cardiac_data,10)#this will show us the first ten rows of the dataset.\n\n   patient_id age_group    sex bmi_category cholesterol diabetes smoking\n1           1     40-50   Male   Overweight         234        0       1\n2           2     60-70 Female       Normal         233        0       0\n3           3     50-60 Female        Obese         220        0       0\n4           4     30-40   Male        Obese         180        0       1\n5           5     30-40 Female        Obese         206        0       0\n6           6     40-50 Female       Normal         202        0       0\n7           7     50-60   Male   Overweight         227        0       0\n8           8     30-40   Male   Overweight         199        0       0\n9           9     50-60   Male   Overweight         239        1       0\n10         10     50-60 Female   Overweight         199        0       0\n   hypertension mi\n1             0  1\n2             1  1\n3             0  0\n4             1  1\n5             0  0\n6             0  1\n7             0  0\n8             0  0\n9             0  1\n10            1  0\n\n\nchecking the data that we have requires us to take a peek of the data generated.\n\nsummary(cardiac_data)\n\n   patient_id      age_group             sex            bmi_category      \n Min.   :  1.00   Length:100         Length:100         Length:100        \n 1st Qu.: 25.75   Class :character   Class :character   Class :character  \n Median : 50.50   Mode  :character   Mode  :character   Mode  :character  \n Mean   : 50.50                                                           \n 3rd Qu.: 75.25                                                           \n Max.   :100.00                                                           \n  cholesterol       diabetes       smoking      hypertension        mi      \n Min.   :169.0   Min.   :0.00   Min.   :0.00   Min.   :0.00   Min.   :0.00  \n 1st Qu.:189.8   1st Qu.:0.00   1st Qu.:0.00   1st Qu.:0.00   1st Qu.:0.00  \n Median :205.0   Median :0.00   Median :0.00   Median :0.00   Median :0.00  \n Mean   :210.5   Mean   :0.23   Mean   :0.17   Mean   :0.46   Mean   :0.22  \n 3rd Qu.:226.2   3rd Qu.:0.00   3rd Qu.:0.00   3rd Qu.:1.00   3rd Qu.:0.00  \n Max.   :307.0   Max.   :1.00   Max.   :1.00   Max.   :1.00   Max.   :1.00  \n\n\nWe use the table function to check distributions. The distributions show us how many participants are in each category.\n\n# Check distributions\ntable(cardiac_data$age_group)\n\n\n30-40 40-50 50-60 60-70 \n   18    30    30    22 \n\ntable(cardiac_data$sex)\n\n\nFemale   Male \n    54     46 \n\ntable(cardiac_data$bmi_category)\n\n\n    Normal      Obese Overweight \n        29         27         44 \n\n\n\nWe test whether there is a significant relationship between hypertension and mi.\n\n# Create contingency table for hypertension and MI\ntable(Hypertension = cardiac_data$hypertension, MI = cardiac_data$mi)\n\n            MI\nHypertension  0  1\n           0 45  9\n           1 33 13\n\n# Chi-square test\nchisq.test(cardiac_data$hypertension, cardiac_data$mi)\n\n\n    Pearson's Chi-squared test with Yates' continuity correction\n\ndata:  cardiac_data$hypertension and cardiac_data$mi\nX-squared = 1.3289, df = 1, p-value = 0.249\n\n\n\n\n#  MI rates by hypertension status\nggplot(cardiac_data, aes(x = factor(hypertension), fill = factor(mi))) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"MI Rates by Hypertension Status\",\n       x = \"Hypertension\",\n       y = \"Proportion\",\n       fill = \"MI\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n# Risk factors by age group\nggplot(cardiac_data, aes(x = age_group, fill = factor(hypertension))) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Hypertension Rates by Age Group\",\n       x = \"Age Group\",\n       y = \"Proportion\",\n       fill = \"Hypertension\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nlets try to test the hypothesis that says that there is no relationship between hypertension and mi. we carry out a logistic regression since our outcome is a binary variable.\n\n# Simple logistic regression using generalised linear models\nmodel &lt;- glm(mi ~ hypertension + age_group + sex + bmi_category + diabetes + smoking,\n            family = binomial(link = \"logit\"),\n            data = cardiac_data)\n\n# Print model summary\nsummary(model)\n\n\nCall:\nglm(formula = mi ~ hypertension + age_group + sex + bmi_category + \n    diabetes + smoking, family = binomial(link = \"logit\"), data = cardiac_data)\n\nCoefficients:\n                       Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)             -4.2709     1.2309  -3.470 0.000521 ***\nhypertension             0.6986     0.5955   1.173 0.240738    \nage_group40-50           1.4806     1.0111   1.464 0.143106    \nage_group50-60           1.2250     0.9917   1.235 0.216748    \nage_group60-70           1.8467     1.0160   1.818 0.069132 .  \nsexMale                  0.9154     0.5599   1.635 0.102078    \nbmi_categoryObese        0.9616     0.7810   1.231 0.218263    \nbmi_categoryOverweight   0.3512     0.7353   0.478 0.632938    \ndiabetes                 0.7378     0.6086   1.212 0.225428    \nsmoking                  1.1524     0.7434   1.550 0.121080    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 105.382  on 99  degrees of freedom\nResidual deviance:  90.223  on 90  degrees of freedom\nAIC: 110.22\n\nNumber of Fisher Scoring iterations: 5\n\n\nFrom the above, we see that there is a marginally significant relationship between being hypertensive and developing MI. Individuals with hypertension have higher odds of MI (p = 0.0588, marginally significant)keeping other factors constant.\n\nsave_data_loc&lt;- here::here(\"data-exercise\", \"cardiac_data.rds\")\nsaveRDS(cardiac_data, save_data_loc)\n\nMy data set is saved just incase anyone wanted to have a look at it."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html",
    "href": "cdcdata-exercise/cdcdata-exercise.html",
    "title": "Doreen Kalembe Data Analysis Portfolio",
    "section": "",
    "text": "We shall start by loading a few packages that we think we might need for this data.\n\n\nWarning: package 'here' was built under R version 4.4.2\n\n\nWarning: package 'tidyverse' was built under R version 4.4.2\n\n\nWarning: package 'purrr' was built under R version 4.4.3\n\n\nWarning: package 'stringr' was built under R version 4.4.2\n\n\nWarning: package 'haven' was built under R version 4.4.2\n\n\nWarning: package 'Hmisc' was built under R version 4.4.2\n\n\nThe data used for this annalysis was the Framing heart study and the dataset was gotten from https://www.framinghamheartstudy.org/ .\nWe shall start by loading the data set and the exploring it to see what it contains.\n\ndata&lt;- read_sas(\"data/fham1.sas7bdat\")\n\nlets go through the data set and see what it entails.\n\ndim(data) \n\n[1] 4434   38\n\n\nThe data set contains 4434 observations and 38 variables. For the purpose of this class, we will reduce the data set to have just a few variables that we shall need for this annalysis .\n\ndiab_data&lt;- data%&gt;%\n  select(SEX, AGE, BMI, TOTCHOL, SYSBP, DIABETES,GLUCOSE)\n\nlets check whether our data set has some missing values\n\npct_complete(diab_data)\n\n[1] 98.49217\n\ngg_miss_var(diab_data)\n\n\n\n\n\n\n\n\nour output shows that we have missing values for BMI, Total cholestral and glucose. In order to have a clean annalysis, we decided to drop the missing values. Our cut off for dropping the values was that if the values are less that 10%, then we can drop them.\n\nsum(is.na(diab_data$BMI))\n\n[1] 19\n\nsum(is.na(diab_data$TOTCHOL))\n\n[1] 52\n\nsum(is.na(diab_data$GLUCOSE))\n\n[1] 397\n\ndiab_data&lt;-diab_data%&gt;%     #this will help us drop the na values in the data set.\n  drop_na()\n\n\nsum(is.na(diab_data)) #checking to see if all the missing values have been dropped.\n\n[1] 0\n\n\nwe went ahead to categorise some other variables.\n\n#we categorised age to see which age is at greater risk of diabetes.\ndiab_data &lt;- diab_data %&gt;%\n   mutate(age_cat= case_when(AGE &gt;= 0 & AGE &lt;= 40~ 0,\n                             AGE &gt; 40 & AGE &lt;= 50~ 1,\n                             AGE &gt; 50 & AGE &lt;= 60~ 2,\n                             AGE &gt; 60 ~3, \n                             TRUE~NA,\n  ))\n\n# BMI and total cholesterol we will also use to create categories because these will give us clinically relevant ranges.\ndiab_data &lt;- diab_data %&gt;%\n   mutate(collestral_cat= case_when(\n    TOTCHOL &lt; 200 ~ \"Normal\",\n    TOTCHOL &gt;= 200 & TOTCHOL&lt; 240 ~ \"Boardline\",\n    TOTCHOL&gt;= 240 ~ \"High\",\n  ))\n  \ndiab_data&lt;- diab_data %&gt;%\n  mutate(bmi_cat = case_when(\n    BMI &lt; 18.5 ~ \"Underweight\",\n    BMI &gt;= 18.5 & BMI &lt; 25 ~ \"Healthyweight\",\n    BMI &gt;= 25 & BMI &lt; 30 ~ \"Overweight\",\n    BMI&gt;= 30 ~ \"Obese\",\n  ))\n\nLets make some summary statitics of the data.\n\n# Summary statistics for numerical and categorical variables\nsummary(diab_data)\n\n      SEX             AGE             BMI           TOTCHOL     \n Min.   :1.000   Min.   :32.00   Min.   :15.54   Min.   :113.0  \n 1st Qu.:1.000   1st Qu.:43.00   1st Qu.:23.10   1st Qu.:206.0  \n Median :2.000   Median :49.00   Median :25.45   Median :234.0  \n Mean   :1.547   Mean   :49.98   Mean   :25.85   Mean   :237.3  \n 3rd Qu.:2.000   3rd Qu.:57.00   3rd Qu.:28.09   3rd Qu.:264.0  \n Max.   :2.000   Max.   :70.00   Max.   :56.80   Max.   :696.0  \n     SYSBP          DIABETES          GLUCOSE          age_cat     \n Min.   : 83.5   Min.   :0.00000   Min.   : 40.00   Min.   :0.000  \n 1st Qu.:117.5   1st Qu.:0.00000   1st Qu.: 72.00   1st Qu.:1.000  \n Median :129.0   Median :0.00000   Median : 78.00   Median :1.000  \n Mean   :133.0   Mean   :0.02866   Mean   : 82.14   Mean   :1.445  \n 3rd Qu.:144.0   3rd Qu.:0.00000   3rd Qu.: 87.00   3rd Qu.:2.000  \n Max.   :295.0   Max.   :1.00000   Max.   :394.00   Max.   :3.000  \n collestral_cat       bmi_cat         \n Length:4013        Length:4013       \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n\n\nChecking out the descriptive summary statistics\n\n#checking the distribution statistics of the variables in the data set \n\ndescribe(diab_data, stats = c(\"mean\", \"sd\", \"min\", \"max\", \"median\", \"iqr\"))\n\ndiab_data \n\n 10  Variables      4013  Observations\n--------------------------------------------------------------------------------\nSEX  Format:BEST \n       n  missing distinct     Info     Mean \n    4013        0        2    0.743    1.547 \n                      \nValue          1     2\nFrequency   1817  2196\nProportion 0.453 0.547\n--------------------------------------------------------------------------------\nAGE : Age (years) at examination  Format:BEST \n       n  missing distinct     Info     Mean  pMedian      Gmd      .05 \n    4013        0       39    0.999    49.98       50    9.989       37 \n     .10      .25      .50      .75      .90      .95 \n      39       43       49       57       62       64 \n\nlowest : 32 33 34 35 36, highest: 66 67 68 69 70\n--------------------------------------------------------------------------------\nBMI : Body Mass Index (kg/(M*M)  Format:BEST \n       n  missing distinct     Info     Mean  pMedian      Gmd      .05 \n    4013        0     1342        1    25.85     25.6    4.433    20.08 \n     .10      .25      .50      .75      .90      .95 \n   21.10    23.10    25.45    28.09    30.77    32.81 \n\nlowest : 15.54 15.96 16.48 16.59 16.69, highest: 44.55 44.71 45.8  51.28 56.8 \n--------------------------------------------------------------------------------\nTOTCHOL : Serum Cholesterol mg/dL  Format:BEST \n       n  missing distinct     Info     Mean  pMedian      Gmd      .05 \n    4013        0      246        1    237.3    235.5    49.34      170 \n     .10      .25      .50      .75      .90      .95 \n     184      206      234      264      293      313 \n\nlowest : 113 119 124 133 135, highest: 439 453 464 600 696\n--------------------------------------------------------------------------------\nSYSBP : Systolic BP mmHg  Format:BEST \n       n  missing distinct     Info     Mean  pMedian      Gmd      .05 \n    4013        0      235        1      133    130.8    24.26    105.0 \n     .10      .25      .50      .75      .90      .95 \n   109.0    117.5    129.0    144.0    163.5    176.7 \n\nlowest : 83.5 85   85.5 90   92  , highest: 242  243  244  248  295 \n--------------------------------------------------------------------------------\nDIABETES : Diabetic Y/N  Format:BEST \n       n  missing distinct     Info      Sum     Mean \n    4013        0        2    0.084      115  0.02866 \n\n--------------------------------------------------------------------------------\nGLUCOSE : Casual Glucose mg/dL  Format:BEST \n       n  missing distinct     Info     Mean  pMedian      Gmd      .05 \n    4013        0      147    0.999    82.14       79     18.4       62 \n     .10      .25      .50      .75      .90      .95 \n      65       72       78       87       98      109 \n\nlowest :  40  43  44  45  46, highest: 366 368 370 386 394\n--------------------------------------------------------------------------------\nage_cat \n       n  missing distinct     Info     Mean  pMedian      Gmd \n    4013        0        4    0.911    1.445      1.5    1.034 \n                                  \nValue          0     1     2     3\nFrequency    676  1483  1248   606\nProportion 0.168 0.370 0.311 0.151\n\nFor the frequency table, variable is rounded to the nearest 0\n--------------------------------------------------------------------------------\ncollestral_cat \n       n  missing distinct \n    4013        0        3 \n                                        \nValue      Boardline      High    Normal\nFrequency       1406      1817       790\nProportion     0.350     0.453     0.197\n--------------------------------------------------------------------------------\nbmi_cat \n       n  missing distinct \n    4013        0        4 \n                                                                  \nValue      Healthyweight         Obese    Overweight   Underweight\nFrequency           1756           518          1689            50\nProportion         0.438         0.129         0.421         0.012\n--------------------------------------------------------------------------------\n\ntable(diab_data$SEX)\n\n\n   1    2 \n1817 2196 \n\nprop.table(table(diab_data$SEX))\n\n\n        1         2 \n0.4527785 0.5472215 \n\nprop.table(table(diab_data$DIABETES))\n\n\n         0          1 \n0.97134313 0.02865687 \n\nsd(diab_data$BMI)\n\n[1] 4.086135\n\ndiab_original &lt;- diab_data\n\nThis description shows us how many individuals belong to each category. There are 1817 males and 2196 females. Out of the 4434 individuals, 45.3% are male and 54.7% are female. The distributions and percentage proportions of the variables are shown in the table.\nLets make some visualisations for the data that we have and also explore some some relationships between some variables\n\nggplot(diab_data, aes(x = GLUCOSE, y = BMI, color = as.factor(DIABETES))) +\n  geom_point(alpha = 0.7) +\n  labs(title = \"Scatter plot of Glucose vs BMI\", x = \"Glucose\", y = \"BMI\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nRelationships.\n\nggplot(diab_data, aes(x = as.factor(DIABETES), y = GLUCOSE, fill = as.factor(SEX))) +\n  geom_boxplot() +\n  labs(title = \"Glucose Levels by Diabetes Outcome\", x = \"Diabetes (0 = No, 1 = Yes)\", y = \"Glucose\")\n\n\n\n\n\n\n\n\nWe can also visualize the distributions of continuous variables.\n\n# Histogram of total cholestral\nggplot(diab_data, aes(x = TOTCHOL)) + \n  geom_histogram(binwidth = 5, fill = \"blue\", color = \"black\", alpha = 0.7) +\n  labs(title = \"chloestral level Distribution\", x = \"Cholestral levels\", y = \"Count\")\n\n\n\n\n\n\n\n# Histogram of systolic blood pressure\nggplot(diab_data, aes(x = SYSBP)) + \n  geom_histogram(binwidth = 5, fill = \"yellow\", color = \"black\", alpha = 0.7) +\n  labs(title = \"systolic blood pressure distribution\", x = \"sysBP\", y = \"Count\")\n\n\n\n\n\n\n\n# Density plot for BMI\nggplot(diab_data, aes(x = BMI)) +\n  geom_density(fill = \"red\", alpha = 0.5) +\n  labs(title = \"BMI Density Plot\", x = \"BMI\", y = \"Density\")\n\n\n\n\n\n\n\n\nFrom the above curves, we see that BMI, total cholestral and systolic blood pressure are normally distributed. This part was contributed by Annalise Cramer\nHere’s the prompt I gave ChatGGPT:\nI want you to give me R code to create a dataset called diab_data with 4013 observations. There should be seven variables, SEX, AGE, BMI, TOTALCHOL, SYSBP, DIABETES, and GLUCOSE. SEX is binary with 1 or 2 as outcomes, mean 1.547, where 45.3% are male and 54.7% are female. AGE has a range of 32-70, with a mean of 49.98 and a median of 49. BMI has a range of 15.54-56.80. with a mean of 25.85 and a median of 25.45. TOTALCHOL has a range of 113.0-696.0, with a mean of 237.3 and a median of 234.0. SYSBP has a range of 83.5-295.0, with a mean of 133.0 and a median of 129.0. DIABETES is a binary variable with either 0 or 1, mean of 0.2866. GLUCOSE has a range of 40.00-394.00, with a mean of 82.14 and a median of 78.00. Only individuals with DIABETES=1 should have a GLUCOSE value about 120. TOTALCHOL should follow a roughly normal distribution with mean 220 and standard deviation 55. SYSBP should follow a Poisson distribution. BMI should follow a normal distribution. Do you have any questions?\nChatGPT asked the following clarifying questions:\nA few clarifications before generating the dataset:\n1.) SEX: You specified that 45.3% are male and 54.7% are female, with a mean of 1.547. This means I’ll set 1 = male, 2 = female and ensure the proportions match. 2.) AGE: Should I assume a normal distribution centered around 49.98 with an appropriate standard deviation to achieve the given median and range? 3.) BMI: You mentioned it should follow a normal distribution, but you provided only the mean (25.85) and median (25.45). Do you have a standard deviation in mind, or should I estimate one based on a plausible distribution? 4.) TOTALCHOL: You stated it should be normally distributed with a mean of 220 and SD of 55, but your overall dataset statistics suggest a mean of 237.3. Should I adjust it to 237.3 or stick to 220? 5.) SYSBP: You mentioned a Poisson distribution but gave a mean of 133. Do you want λ = 133 for the Poisson distribution, or should I adjust it to match the range and median? 6.) DIABETES: I’ll generate this as a Bernoulli variable with a mean of 0.2866. 7.) GLUCOSE: You mentioned that only diabetic individuals should have GLUCOSE values above 120. Should I model GLUCOSE differently for diabetics (e.g., a normal distribution centered above 120) and non-diabetics (e.g., normal distribution centered around 82.14)? Let me know how you’d like me to handle these details!\nI responded to these questions with the following:\n1.) Yes that’s good. 2.) Yes, assume a normal distribution with the parameters I gave you. 3.) For BMI use a standard deviation of 4.086135. 4.) Use 237.3. 5.) Adjust to match the range and median. It look like a poisson or a left skewed normal distribution. 6.) Okay good. 7.) No, do not model them as separate normal distributions. Some people with diabetes may have glucose levels under 120, but no one without diabetes should have a glucose level above 120.\nHere’s the code given by ChatGPT to generate the data.\n\nset.seed(42)  # For reproducibility\n\n# Number of observations\nn &lt;- 4013\n\n# Generate SEX (1 = male, 2 = female) with given proportions\nSEX &lt;- sample(c(1, 2), size = n, replace = TRUE, prob = c(0.453, 0.547))\n\n# Generate AGE from a normal distribution and round to integers\nAGE &lt;- round(rnorm(n, mean = 49.98, sd = (70 - 32) / 6))\nAGE &lt;- pmax(pmin(AGE, 70), 32)  # Ensure within range\n\n# Generate BMI from a normal distribution\nBMI &lt;- rnorm(n, mean = 25.85, sd = 4.086135)\nBMI &lt;- pmax(pmin(BMI, 56.80), 15.54)  # Ensure within range\n\n# Generate TOTALCHOL from a normal distribution\nTOTALCHOL &lt;- rnorm(n, mean = 237.3, sd = 55)\nTOTALCHOL &lt;- pmax(pmin(TOTALCHOL, 696.0), 113.0)  # Ensure within range\n\n# Generate SYSBP - left-skewed normal-like distribution\nSYSBP &lt;- rnorm(n, mean = 133, sd = 25)\nSYSBP &lt;- pmax(pmin(SYSBP, 295.0), 83.5)  # Ensure within range\n\n# Generate DIABETES as a Bernoulli variable\nDIABETES &lt;- rbinom(n, 1, 0.2866)\n\n# Generate GLUCOSE ensuring non-diabetics have ≤ 120\nGLUCOSE &lt;- runif(n, 40, 120)  # Base glucose distribution\nGLUCOSE[DIABETES == 1] &lt;- runif(sum(DIABETES), 120, 394)  # Adjust diabetics\n\n# Create data frame\ndiab_data &lt;- data.frame(SEX, AGE, BMI, TOTALCHOL, SYSBP, DIABETES, GLUCOSE)\n\n# Display summary statistics\nsummary(diab_data)\n\n      SEX             AGE             BMI          TOTALCHOL    \n Min.   :1.000   Min.   :32.00   Min.   :15.54   Min.   :113.0  \n 1st Qu.:1.000   1st Qu.:46.00   1st Qu.:22.96   1st Qu.:199.1  \n Median :2.000   Median :50.00   Median :25.83   Median :237.2  \n Mean   :1.546   Mean   :49.91   Mean   :25.82   Mean   :237.6  \n 3rd Qu.:2.000   3rd Qu.:54.00   3rd Qu.:28.55   3rd Qu.:275.3  \n Max.   :2.000   Max.   :70.00   Max.   :39.89   Max.   :416.6  \n     SYSBP          DIABETES         GLUCOSE      \n Min.   : 83.5   Min.   :0.0000   Min.   : 40.01  \n 1st Qu.:115.9   1st Qu.:0.0000   1st Qu.: 67.41  \n Median :132.7   Median :0.0000   Median : 96.13  \n Mean   :133.3   Mean   :0.2973   Mean   :134.20  \n 3rd Qu.:150.2   3rd Qu.:1.0000   3rd Qu.:172.69  \n Max.   :220.1   Max.   :1.0000   Max.   :393.09  \n\n\nLet’s make Doreen’s figures to try to see if the data matches. I’ll rename Doreen’s data to diab_original.\n\ndescribe(diab_data, stats = c(\"mean\", \"sd\", \"min\", \"max\", \"median\", \"iqr\"))\n\ndiab_data \n\n 7  Variables      4013  Observations\n--------------------------------------------------------------------------------\nSEX \n       n  missing distinct     Info     Mean \n    4013        0        2    0.744    1.546 \n                      \nValue          1     2\nFrequency   1821  2192\nProportion 0.454 0.546\n--------------------------------------------------------------------------------\nAGE \n       n  missing distinct     Info     Mean  pMedian      Gmd      .05 \n    4013        0       39    0.998    49.91       50    7.178       39 \n     .10      .25      .50      .75      .90      .95 \n      42       46       50       54       58       60 \n\nlowest : 32 33 34 35 36, highest: 66 67 68 69 70\n--------------------------------------------------------------------------------\nBMI \n       n  missing distinct     Info     Mean  pMedian      Gmd      .05 \n    4013        0     3994        1    25.82     25.8    4.591    19.12 \n     .10      .25      .50      .75      .90      .95 \n   20.62    22.96    25.83    28.55    31.07    32.51 \n\nlowest : 15.54   15.566  15.6695 15.689  15.7447\nhighest: 38.3861 38.4221 39.0084 39.2742 39.8898\n--------------------------------------------------------------------------------\nTOTALCHOL \n       n  missing distinct     Info     Mean  pMedian      Gmd      .05 \n    4013        0     3949        1    237.6    237.4    62.79    144.6 \n     .10      .25      .50      .75      .90      .95 \n   165.7    199.1    237.2    275.3    309.1    330.3 \n\nlowest : 113     113.188 113.844 114.092 114.592\nhighest: 399.605 402.167 403.73  406.424 416.604\n--------------------------------------------------------------------------------\nSYSBP \n       n  missing distinct     Info     Mean  pMedian      Gmd      .05 \n    4013        0     3911        1    133.3    133.1    28.17    91.71 \n     .10      .25      .50      .75      .90      .95 \n  100.35   115.85   132.74   150.21   165.21   174.88 \n\nlowest : 83.5    83.5432 83.756  83.7759 84.0645\nhighest: 208.476 210.102 210.483 213.928 220.143\n--------------------------------------------------------------------------------\nDIABETES \n       n  missing distinct     Info      Sum     Mean \n    4013        0        2    0.627     1193   0.2973 \n\n--------------------------------------------------------------------------------\nGLUCOSE \n       n  missing distinct     Info     Mean  pMedian      Gmd      .05 \n    4013        0     4013        1    134.2    108.5    98.51    45.22 \n     .10      .25      .50      .75      .90      .95 \n   50.69    67.41    96.13   172.69   308.79   352.75 \n\nlowest : 40.0102 40.0182 40.034  40.0401 40.0456\nhighest: 392.332 392.826 392.948 393.038 393.089\n--------------------------------------------------------------------------------\n\ntable(diab_data$SEX)\n\n\n   1    2 \n1821 2192 \n\nprop.table(table(diab_data$SEX))\n\n\n        1         2 \n0.4537752 0.5462248 \n\nprop.table(table(diab_data$DIABETES))\n\n\n        0         1 \n0.7027162 0.2972838 \n\n\nSo far, the synthetic data is doing a good job mathcing the original in terms of descriptive statistics. Let’s see how it ohld up when I make the plots.\n\nggplot(diab_original, aes(x = GLUCOSE, y = BMI, color = as.factor(DIABETES))) +\n  geom_point(alpha = 0.7) +\n  labs(title = \"Scatter plot of Glucose vs BMI\", x = \"Glucose\", y = \"BMI\") +\n  theme_minimal()\n\n\n\n\n\n\n\nggplot(diab_data, aes(x = GLUCOSE, y = BMI, color = as.factor(DIABETES))) +\n  geom_point(alpha = 0.7) +\n  labs(title = \"Scatter plot of Glucose vs BMI\", x = \"Glucose\", y = \"BMI\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThese don’t match great. I don’t think the synthetic data does a good job of matching the distribution of the glucose. I specified that it should be normal and the means.\nLet’s try the next plots.\n\nggplot(diab_original, aes(x = as.factor(DIABETES), y = GLUCOSE, fill = as.factor(SEX))) +\n  geom_boxplot() +\n  labs(title = \"Glucose Levels by Diabetes Outcome\", x = \"Diabetes (0 = No, 1 = Yes)\", y = \"Glucose\")\n\n\n\n\n\n\n\nggplot(diab_data, aes(x = as.factor(DIABETES), y = GLUCOSE, fill = as.factor(SEX))) +\n  geom_boxplot() +\n  labs(title = \"Glucose Levels by Diabetes Outcome\", x = \"Diabetes (0 = No, 1 = Yes)\", y = \"Glucose\")\n\n\n\n\n\n\n\n\nThe non-diabetic data matches pretty well, t=but the diabetic data has much higher glucose. I think this is the same problem as in the previous plots, where the distribution is wrong.\n\n# Histogram of total cholestral\nggplot(diab_original, aes(x = TOTCHOL)) + \n  geom_histogram(binwidth = 5, fill = \"blue\", color = \"black\", alpha = 0.7) +\n  labs(title = \"chloestral level Distribution\", x = \"Cholestral levels\", y = \"Count\")\n\n\n\n\n\n\n\nggplot(diab_data, aes(x = TOTALCHOL)) + \n  geom_histogram(binwidth = 5, fill = \"blue\", color = \"black\", alpha = 0.7) +\n  labs(title = \"chloestral level Distribution\", x = \"Cholestral levels\", y = \"Count\")\n\n\n\n\n\n\n\n# Histogram of systolic blood pressure\nggplot(diab_original, aes(x = SYSBP)) + \n  geom_histogram(binwidth = 5, fill = \"yellow\", color = \"black\", alpha = 0.7) +\n  labs(title = \"systolic blood pressure distribution\", x = \"sysBP\", y = \"Count\")\n\n\n\n\n\n\n\nggplot(diab_data, aes(x = SYSBP)) + \n  geom_histogram(binwidth = 5, fill = \"yellow\", color = \"black\", alpha = 0.7) +\n  labs(title = \"systolic blood pressure distribution\", x = \"sysBP\", y = \"Count\")\n\n\n\n\n\n\n\n# Density plot for BMI\nggplot(diab_original, aes(x = BMI)) +\n  geom_density(fill = \"red\", alpha = 0.5) +\n  labs(title = \"BMI Density Plot\", x = \"BMI\", y = \"Density\")\n\n\n\n\n\n\n\nggplot(diab_data, aes(x = BMI)) +\n  geom_density(fill = \"red\", alpha = 0.5) +\n  labs(title = \"BMI Density Plot\", x = \"BMI\", y = \"Density\")\n\n\n\n\n\n\n\n\nThese don’t look half bad. They look wider, but when comparing the x-axes, these aren’t too far off. Notably, the high value outliers aren’t present. The distirbutions are shaped correctly, even the tricky left skew. However, the sythetic data has a problem with over representing the lowest values."
  },
  {
    "objectID": "aboutme.html",
    "href": "aboutme.html",
    "title": "About me",
    "section": "",
    "text": "Here is what you can know about me. I identify so much as a teacher and knowledge seeker. I am a mum of two beautiful daughters and a handsome energetic son(Yes! three babies and I need two more).\nIn my free time, I enjoy listening to podcasts, sermons and music. I enjoy cooking and trying foods but I have not liked the pumpkin pie any bit plus the sweet meats(Guess I am weird.)\n\n\n\nThis is me\n\n\n\n\nI did education with physics and mathematics for my undergraduate studies. I taught high school students for three years before enrolling for my masters degree.\nI did alot of Biomathematics and a touch of computer science during my masters. This brings me to a point where I talk about the few softwares or programming languages that i know.\n##Skills and programming\nDuring my masters degree at the African Institute for Mathematical sciences, I learnt how to use python, abit of statistical regression with R, and due to curiosity, I taught myself abit of java.\nFor my PhD, I have so far learnt more about R during my first semester and I can not wait to use more of it in this course.\n\n\n\nMy primary interests are in modelling of infectious diseases. We are working on TB in Uganda. Not only am I interested in infectious diseases but also Data Science, AI, Machine learning, maternal and child health, Sexual and reproductive health and finally health policy(Partly because I feel like the policies that are passed are sometimes not the best one for a particular health problem :)).\nI was reading this and I was astonished about the future. As other women are worried about their youthful appearance, I am excited of what the future holds and what my children will know in the next 20 years."
  },
  {
    "objectID": "aboutme.html#education-background",
    "href": "aboutme.html#education-background",
    "title": "About me",
    "section": "",
    "text": "I did education with physics and mathematics for my undergraduate studies. I taught high school students for three years before enrolling for my masters degree.\nI did alot of Biomathematics and a touch of computer science during my masters. This brings me to a point where I talk about the few softwares or programming languages that i know.\n##Skills and programming\nDuring my masters degree at the African Institute for Mathematical sciences, I learnt how to use python, abit of statistical regression with R, and due to curiosity, I taught myself abit of java.\nFor my PhD, I have so far learnt more about R during my first semester and I can not wait to use more of it in this course."
  },
  {
    "objectID": "aboutme.html#my-interests.",
    "href": "aboutme.html#my-interests.",
    "title": "About me",
    "section": "",
    "text": "My primary interests are in modelling of infectious diseases. We are working on TB in Uganda. Not only am I interested in infectious diseases but also Data Science, AI, Machine learning, maternal and child health, Sexual and reproductive health and finally health policy(Partly because I feel like the policies that are passed are sometimes not the best one for a particular health problem :)).\nI was reading this and I was astonished about the future. As other women are worried about their youthful appearance, I am excited of what the future holds and what my children will know in the next 20 years."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html",
    "href": "coding-exercise/coding-exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "#Placeholder file for the future R coding exercise.\n#we are installing these packages and loading the different libraries that are #required for the different sets of code to run in R.\n\n#install.packages(\"dslabs\")\n#install.packages(\"naniar\")\n#loads the dslabs package\nlibrary(dslabs)\n\nWarning: package 'dslabs' was built under R version 4.4.2\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.4.2\n\n\nWarning: package 'purrr' was built under R version 4.4.3\n\n\nWarning: package 'stringr' was built under R version 4.4.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(dplyr)\nlibrary(naniar)\n\n\\(\\textbf{This section contributed to by ANNALISE CRAMER, after Doreen's analysis}\\)\n\n#look at help file for gapminder data\nhelp(\"gapminder\")\n\nstarting httpd help server ... done\n\ndata(\"gapminder\") \n#we are loading the data to make it ready for use.\n\nstr(gapminder) \n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\n\n#this function is helping us know the number of rows(observations) and number of #variables in the data set. There are 10545 rows and 9 columns.\n\nsummary(gapminder)\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586  \n\n#the summary function helps us know the summary statistic of each variable in the\n#data set.\n\nclass(gapminder)\n\n[1] \"data.frame\"\n\n# Use the class() function to check the type of the gapminder object. its class \n#is a data frame.\n\ncode that assigns afrian countries.\n\nafricadata&lt;-gapminder%&gt;%\nfilter(continent== \"Africa\")\n#africadata\n#this code gets filter for countries that only belong to the African continent.\n\nData for life expectancy and infant mortality.\n\nexp_mortal_data&lt;- africadata%&gt;%\nselect(infant_mortality,life_expectancy)\n#exp_mortal_data\n#this code gets into the African data and selects only the two colums we need.\n\nData for life expectancy and population.\n\npopn_expct_data&lt;- africadata%&gt;%\nselect(population,life_expectancy)\n #this code gets into the African data and selects only the two colums we need.\n\n\n#get an overview of the data structure for life expectancy and infant mortality.\nstr(exp_mortal_data)\n\n'data.frame':   2907 obs. of  2 variables:\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n\n#summary of the data structure.\nsummary(exp_mortal_data)\n\n infant_mortality life_expectancy\n Min.   : 11.40   Min.   :13.20  \n 1st Qu.: 62.20   1st Qu.:48.23  \n Median : 93.40   Median :53.98  \n Mean   : 95.12   Mean   :54.38  \n 3rd Qu.:124.70   3rd Qu.:60.10  \n Max.   :237.40   Max.   :77.60  \n NA's   :226                     \n\n#get an overview of the data structure for population and life expectancy.\nstr(popn_expct_data)\n\n'data.frame':   2907 obs. of  2 variables:\n $ population     : num  11124892 5270844 2431620 524029 4829291 ...\n $ life_expectancy: num  47.5 36 38.3 50.3 35.2 ...\n\n#summary of the data structure.\nsummary(popn_expct_data)\n\n   population        life_expectancy\n Min.   :    41538   Min.   :13.20  \n 1st Qu.:  1605232   1st Qu.:48.23  \n Median :  5570982   Median :53.98  \n Mean   : 12235961   Mean   :54.38  \n 3rd Qu.: 13888152   3rd Qu.:60.10  \n Max.   :182201962   Max.   :77.60  \n NA's   :51                         \n\n\nPlot life expectancy as a function of infant mortality.\n\nlibrary(ggplot2)\nggplot(data= exp_mortal_data, aes(x=infant_mortality, y= life_expectancy))+\n  geom_point(color=\"blue\", alpha=0.7)+\n   labs(\n    title = \"Life Expectancy vs. Infant Mortality\",\n    x = \"Infant Mortality (per 1,000 births)\",\n    y = \"Life Expectancy (years)\"\n  ) +\n  theme_bw()\n\nWarning: Removed 226 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nSecond plot of life expectacy vs population size.\n\nggplot(data = popn_expct_data, aes(x = population, y = life_expectancy)) +\n  geom_point(color = \"red\", alpha = 0.6) +\n  scale_x_log10() +  # Set x-axis to a logarithmic scale\n  labs(\n    title = \"Life Expectancy vs. Population Size (Log Scale)\",\n    x = \"Population (log scale)\",\n    y = \"Life Expectancy (years)\"\n  ) +\n  theme_minimal()  #\n\nWarning: Removed 51 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nFrom the second plot, we notice that there are streaks in the data because countries with similar population sizes often share similar demographic characteristics or reporting practices.We notice that most countries with populations clustered around the same thresholds(e.g 5million, 10 million, 50 million…) display similar life expectancy values, creating visual streaks.\nlets figure out some missing data.\n\nsum(is.na(africadata$infant_mortality))\n\n[1] 226\n\n#these are the missing values for infant mortality in the africadata set.\n\nyears with missing data.\n\nlibrary(naniar)\nmissing_infant_motality&lt;-africadata%&gt;%\n  filter(is.na(infant_mortality))\n\nmissing_years&lt;- unique(missing_infant_motality$year)\nmissing_years\n\n [1] 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974\n[16] 1975 1976 1977 1978 1979 1980 1981 2016\n\n\n\nvalid_data&lt;- africadata%&gt;%\n filter(year==2000)\n\nThe code above only filters for rows in the data sets where the year is 2000 and leaves out everything else.\n\nstr(valid_data)\n\n'data.frame':   51 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...\n $ infant_mortality: num  33.9 128.3 89.3 52.4 96.2 ...\n $ life_expectancy : num  73.3 52.3 57.2 47.6 52.6 46.7 54.3 68.4 45.3 51.5 ...\n $ fertility       : num  2.51 6.84 5.98 3.41 6.59 7.06 5.62 3.7 5.45 7.35 ...\n $ population      : num  31183658 15058638 6949366 1736579 11607944 ...\n $ gdp             : num  5.48e+10 9.13e+09 2.25e+09 5.63e+09 2.61e+09 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\nsummary(valid_data)\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0  \n\n\nLets make these plots again but this time around with the data that contains the year 2000.\n\nggplot(data= valid_data, aes(x=infant_mortality, y= life_expectancy))+\n  geom_point(color=\"blue\", alpha=0.7)+\n   labs(\n    title = \"Life Expectancy vs. Infant Mortality\",\n    x = \"Infant Mortality (per 1,000 births)\",\n    y = \"Life Expectancy (years)\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\n\n\nFrom the above plot, we see that there is a negative correlation between life expectancy aand infant mortality.\nLets take a look at a Second plot. This contains data for the year 2000 but still we are considering life expentancy and population size.\n\nggplot(data = valid_data, aes(x = population, y = life_expectancy)) +\n  geom_point(color = \"green\", alpha = 0.6) +\n  scale_x_log10() +  # Set x-axis to a logarithmic scale\n  labs(\n    title = \"Life Expectancy vs. Population Size (Log Scale)\",\n    x = \"Population (log scale)\",\n    y = \"Life Expectancy (years)\"\n  ) +\n  theme_minimal()  #\n\n\n\n\n\n\n\n\nFrom the above, we dont see any correlation between the two variables.\nlets apply some linear regression to the data and see what comes out.\n\nfit1&lt;-lm(valid_data$life_expectancy ~valid_data$infant_mortality)\n#applying linear regression model to the two variables.\n\nfit2&lt;-lm(valid_data$life_expectancy~valid_data$population)\n\nsummary(fit1)\n\n\nCall:\nlm(formula = valid_data$life_expectancy ~ valid_data$infant_mortality)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-22.6651  -3.7087   0.9914   4.0408   8.6817 \n\nCoefficients:\n                            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                 71.29331    2.42611  29.386  &lt; 2e-16 ***\nvalid_data$infant_mortality -0.18916    0.02869  -6.594 2.83e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.221 on 49 degrees of freedom\nMultiple R-squared:  0.4701,    Adjusted R-squared:  0.4593 \nF-statistic: 43.48 on 1 and 49 DF,  p-value: 2.826e-08\n\nsummary(fit2)\n\n\nCall:\nlm(formula = valid_data$life_expectancy ~ valid_data$population)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-18.429  -4.602  -2.568   3.800  18.802 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           5.593e+01  1.468e+00  38.097   &lt;2e-16 ***\nvalid_data$population 2.756e-08  5.459e-08   0.505    0.616    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.524 on 49 degrees of freedom\nMultiple R-squared:  0.005176,  Adjusted R-squared:  -0.01513 \nF-statistic: 0.2549 on 1 and 49 DF,  p-value: 0.6159\n\n\n\nFrom the first fit1 the summary of results shows that there is a negative relationship between life expectancy and infant mortality. for every unit increase in infant mortality, life expectancy decreases by 0.189 years and this is statistically significant with p-value&lt;0.001.\nFrom the summary results of the second fit, it shows that When the population is 0 (hypothetical case), the predicted life expectancy is approximately 55.93 years.\nThere is a positive relationship between life expectancy and population size. For every unit increase in population size, the life expectancy increase by 0.00000002756 years(This is not meaningful). However, this was not statitically significant with p-values=0.616 &gt;0.05.\nThis suggests almost no meaningful relationship between between population size and life expectancy in our data.\n\\(\\textbf{The following section is Annalise Cramer's analysis}\\)\nFirst, let us load the dataset. There’s several difference infectious diseases, states, years 1928-2011, weeks, and counts of cases.\n\ndata(\"us_contagious_diseases\") \nstr(us_contagious_diseases)\n\n'data.frame':   16065 obs. of  6 variables:\n $ disease        : Factor w/ 7 levels \"Hepatitis A\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ state          : Factor w/ 51 levels \"Alabama\",\"Alaska\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ year           : num  1966 1967 1968 1969 1970 ...\n $ weeks_reporting: num  50 49 52 49 51 51 45 45 45 46 ...\n $ count          : num  321 291 314 380 413 378 342 467 244 286 ...\n $ population     : num  3345787 3364130 3386068 3412450 3444165 ...\n\nsummary(us_contagious_diseases)\n\n        disease            state            year      weeks_reporting\n Hepatitis A:2346   Alabama   :  315   Min.   :1928   Min.   : 0.00  \n Measles    :3825   Alaska    :  315   1st Qu.:1950   1st Qu.:31.00  \n Mumps      :1785   Arizona   :  315   Median :1975   Median :46.00  \n Pertussis  :2856   Arkansas  :  315   Mean   :1971   Mean   :37.38  \n Polio      :2091   California:  315   3rd Qu.:1990   3rd Qu.:50.00  \n Rubella    :1887   Colorado  :  315   Max.   :2011   Max.   :52.00  \n Smallpox   :1275   (Other)   :14175                                 \n     count          population      \n Min.   :     0   Min.   :   86853  \n 1st Qu.:     7   1st Qu.: 1018755  \n Median :    69   Median : 2749249  \n Mean   :  1492   Mean   : 4107584  \n 3rd Qu.:   525   3rd Qu.: 4996229  \n Max.   :132342   Max.   :37607525  \n                  NA's   :214       \n\n\nI want to only look at Pertussis (whooping cough), then I will identify the states which seem the most severe to see if I can identify a region.\n\nunique(us_contagious_diseases$disease)\n\n[1] Hepatitis A Measles     Mumps       Pertussis   Polio       Rubella    \n[7] Smallpox   \nLevels: Hepatitis A Measles Mumps Pertussis Polio Rubella Smallpox\n\npertussis &lt;- us_contagious_diseases %&gt;%\n  filter(disease==\"Pertussis\")\n\nLet’s make a few exploratory plots. a.) Disease counts, year by year, colored by state.\n\nggplot(data=pertussis, aes(x=year, y=count, col=state)) +\n  geom_point()\n\n\n\n\n\n\n\n\nThe data looks a little crazy with missing values, so let me check mumps and polio.\n\nunique(us_contagious_diseases$disease)\n\n[1] Hepatitis A Measles     Mumps       Pertussis   Polio       Rubella    \n[7] Smallpox   \nLevels: Hepatitis A Measles Mumps Pertussis Polio Rubella Smallpox\n\nmumps &lt;- us_contagious_diseases %&gt;%\n  filter(disease==\"Mumps\")\n\npolio &lt;- us_contagious_diseases %&gt;%\n  filter(disease==\"Polio\")\n\nggplot(data=mumps, aes(x=year, y=count, col=state)) +\n  geom_point()\n\n\n\n\n\n\n\nggplot(data=polio, aes(x=year, y=count, col=state)) +\n  geom_point()\n\n\n\n\n\n\n\n\nOkay, looks like polio and mumps are okay, and the pertussis data is weird. Let’s continue forward with polio. I’ll create a new variable, Region, using CDC’s geographic divisions. I used AI to write this, since I didn’t want to type out every state’s name.\n\nregion_data &lt;- polio %&gt;%\n  mutate(\n    region = case_when(\n      state %in% c(\"Connecticut\", \"Maine\", \"Massachusetts\", \"New Hampshire\", \"Rhode Island\", \"Vermont\") ~ \"New England\",\n      state %in% c(\"New Jersey\", \"New York\", \"Pennsylvania\") ~ \"Middle Atlantic\",\n      state %in% c(\"Illinois\", \"Indiana\", \"Michigan\", \"Ohio\", \"Wisconsin\") ~ \"East North Central\",\n      state %in% c(\"Iowa\", \"Kansas\", \"Minnesota\", \"Missouri\", \"Nebraska\", \"North Dakota\", \"South Dakota\") ~ \"West North Central\",\n      state %in% c(\"Delaware\", \"District of Columbia\", \"Florida\", \"Georgia\", \"Maryland\", \"North Carolina\", \"South Carolina\", \"Virginia\", \"West Virginia\") ~ \"South Atlantic\",\n      state %in% c(\"Alabama\", \"Kentucky\", \"Mississippi\", \"Tennessee\") ~ \"East South Central\",\n      state %in% c(\"Arkansas\", \"Louisiana\", \"Oklahoma\", \"Texas\") ~ \"West South Central\",\n      state %in% c(\"Arizona\", \"Colorado\", \"Idaho\", \"Montana\", \"Nevada\", \"New Mexico\", \"Utah\", \"Wyoming\") ~ \"Mountain\",\n      state %in% c(\"Alaska\", \"California\", \"Hawaii\", \"Oregon\", \"Washington\") ~ \"Pacific\",\n      TRUE ~ \"Other\" # Catch-all for states not listed\n    )\n  )\n\nOkay, I’ll make the same plot as earlier, but I’ll color by region.\n\nggplot(data=region_data, aes(x=year, y=count, col=region)) +\n  geom_point()\n\n\n\n\n\n\n\nggplot(data=region_data, aes(x=year, y=count, col=region)) +\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nNext, I will make 2 models. The first will look at state as a predictor, the second will look at region as a predictor.\n\nmodel1 &lt;- lm(data=region_data, count~state)\nmodel2 &lt;- lm(data=region_data, count~region)\n\nsummary(model1)\n\n\nCall:\nlm(formula = count ~ state, data = region_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1319.3  -147.2   -46.6    29.9  4872.7 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                147.6585    71.8937   2.054  0.04012 *  \nstateAlaska               -134.8293   101.6731  -1.326  0.18495    \nstateArizona               -74.7805   101.6731  -0.735  0.46212    \nstateArkansas              -14.8049   101.6731  -0.146  0.88424    \nstateCalifornia           1016.8049   101.6731  10.001  &lt; 2e-16 ***\nstateColorado               -0.4878   101.6731  -0.005  0.99617    \nstateConnecticut            20.0488   101.6731   0.197  0.84370    \nstateDelaware             -123.8049   101.6731  -1.218  0.22349    \nstateDistrict Of Columbia -105.0732   101.6731  -1.033  0.30152    \nstateFlorida                35.8537   101.6731   0.353  0.72440    \nstateGeorgia                 0.7073   101.6731   0.007  0.99445    \nstateHawaii               -132.2927   101.6731  -1.301  0.19335    \nstateIdaho                 -82.2927   101.6731  -0.809  0.41839    \nstateIllinois              608.4390   101.6731   5.984 2.56e-09 ***\nstateIndiana                80.7073   101.6731   0.794  0.42741    \nstateIowa                  194.6585   101.6731   1.915  0.05569 .  \nstateKansas                 89.7073   101.6731   0.882  0.37771    \nstateKentucky               52.7805   101.6731   0.519  0.60373    \nstateLouisiana              16.6585   101.6731   0.164  0.86987    \nstateMaine                 -80.1220   101.6731  -0.788  0.43077    \nstateMaryland              -30.4390   101.6731  -0.299  0.76468    \nstateMassachusetts         241.6829   101.6731   2.377  0.01754 *  \nstateMichigan              521.4390   101.6731   5.129 3.20e-07 ***\nstateMinnesota             299.0732   101.6731   2.942  0.00330 ** \nstateMississippi            -5.3659   101.6731  -0.053  0.95792    \nstateMissouri               94.4146   101.6731   0.929  0.35320    \nstateMontana               -90.7805   101.6731  -0.893  0.37203    \nstateNebraska               43.0244   101.6731   0.423  0.67222    \nstateNevada               -134.7073   101.6731  -1.325  0.18535    \nstateNew Hampshire        -115.5610   101.6731  -1.137  0.25584    \nstateNew Jersey            174.0244   101.6731   1.712  0.08712 .  \nstateNew Mexico            -85.0732   101.6731  -0.837  0.40284    \nstateNew York             1171.6829   101.6731  11.524  &lt; 2e-16 ***\nstateNorth Carolina        120.5610   101.6731   1.186  0.23585    \nstateNorth Dakota          -85.6829   101.6731  -0.843  0.39948    \nstateOhio                  468.0488   101.6731   4.603 4.41e-06 ***\nstateOklahoma               51.6341   101.6731   0.508  0.61162    \nstateOregon                -24.2439   101.6731  -0.238  0.81156    \nstatePennsylvania          273.3659   101.6731   2.689  0.00723 ** \nstateRhode Island          -91.0244   101.6731  -0.895  0.37075    \nstateSouth Carolina        -47.2195   101.6731  -0.464  0.64239    \nstateSouth Dakota          -55.4146   101.6731  -0.545  0.58579    \nstateTennessee              47.6341   101.6731   0.469  0.63948    \nstateTexas                 528.3659   101.6731   5.197 2.23e-07 ***\nstateUtah                  -58.4146   101.6731  -0.575  0.56567    \nstateVermont              -114.8537   101.6731  -1.130  0.25876    \nstateVirginia               63.5122   101.6731   0.625  0.53226    \nstateWashington             60.0244   101.6731   0.590  0.55501    \nstateWest Virginia         -16.0976   101.6731  -0.158  0.87422    \nstateWisconsin             223.7317   101.6731   2.201  0.02788 *  \nstateWyoming              -110.9512   101.6731  -1.091  0.27529    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 460.3 on 2040 degrees of freedom\nMultiple R-squared:  0.2595,    Adjusted R-squared:  0.2413 \nF-statistic:  14.3 on 50 and 2040 DF,  p-value: &lt; 2.2e-16\n\nsummary(model2)\n\n\nCall:\nlm(formula = count ~ region, data = region_data)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-687.3 -198.5  -87.0   14.3 5504.7 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                528.13      35.00  15.088  &lt; 2e-16 ***\nregionEast South Central  -356.71      52.50  -6.794 1.42e-11 ***\nregionMiddle Atlantic      159.22      57.16   2.786  0.00539 ** \nregionMountain            -460.16      44.62 -10.313  &lt; 2e-16 ***\nregionNew England         -403.78      47.39  -8.520  &lt; 2e-16 ***\nregionOther               -485.55      85.74  -5.663 1.69e-08 ***\nregionPacific             -223.38      49.50  -4.513 6.76e-06 ***\nregionSouth Atlantic      -380.09      44.62  -8.518  &lt; 2e-16 ***\nregionWest North Central  -297.65      45.83  -6.495 1.04e-10 ***\nregionWest South Central  -235.01      52.50  -4.476 8.01e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 501.2 on 2081 degrees of freedom\nMultiple R-squared:  0.1047,    Adjusted R-squared:  0.1008 \nF-statistic: 27.04 on 9 and 2081 DF,  p-value: &lt; 2.2e-16\n\n\nWe will assume null hypotheses that neither set of predictors is associated with case count, and we’ll use an alpha=0.05 significance level. Model 1 shows that some states were significant predictors of pilio case counts, California, Illinois, Massachusetts, Michigan, Minnesota, New York, Ohio, Pensylvania, Texas, and Wisconsin. Model 2 found all regions to be significantly asosociated with polio case counts."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html",
    "href": "fitting-exercise/fitting-exercise.html",
    "title": "This section is contributed by PRASANGA PAUDEL",
    "section": "",
    "text": "We shall start by loading a few packages that we think we might need for this data.\n\n\nWarning: package 'here' was built under R version 4.4.2\n\n\nWarning: package 'tidyverse' was built under R version 4.4.2\n\n\nWarning: package 'purrr' was built under R version 4.4.3\n\n\nWarning: package 'stringr' was built under R version 4.4.2\n\n\nWarning: package 'haven' was built under R version 4.4.2\n\n\nWarning: package 'Hmisc' was built under R version 4.4.2\n\n\nWe shall start by loading the data set and the exploring it to see what it contains.\n\n# Read the CSV file\nMavo_data&lt;- read_csv(\"data/Mavoglurant_A2121_nmpk.csv\")\n\nRows: 2678 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (17): ID, CMT, EVID, EVI2, MDV, DV, LNDV, AMT, TIME, DOSE, OCC, RATE, AG...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Inspect the column names to find the correct one\ncolnames(Mavo_data)\n\n [1] \"ID\"   \"CMT\"  \"EVID\" \"EVI2\" \"MDV\"  \"DV\"   \"LNDV\" \"AMT\"  \"TIME\" \"DOSE\"\n[11] \"OCC\"  \"RATE\" \"AGE\"  \"SEX\"  \"RACE\" \"WT\"   \"HT\"  \n\n\nlets go through the data set and see what it entails.\n\nglimpse(Mavo_data) \n\nRows: 2,678\nColumns: 17\n$ ID   &lt;dbl&gt; 793, 793, 793, 793, 793, 793, 793, 793, 793, 793, 793, 793, 793, …\n$ CMT  &lt;dbl&gt; 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2,…\n$ EVID &lt;dbl&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,…\n$ EVI2 &lt;dbl&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,…\n$ MDV  &lt;dbl&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,…\n$ DV   &lt;dbl&gt; 0.00, 491.00, 605.00, 556.00, 310.00, 237.00, 147.00, 101.00, 72.…\n$ LNDV &lt;dbl&gt; 0.000, 6.196, 6.405, 6.321, 5.737, 5.468, 4.990, 4.615, 4.282, 3.…\n$ AMT  &lt;dbl&gt; 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, …\n$ TIME &lt;dbl&gt; 0.000, 0.200, 0.250, 0.367, 0.533, 0.700, 1.200, 2.200, 3.200, 4.…\n$ DOSE &lt;dbl&gt; 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 2…\n$ OCC  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ RATE &lt;dbl&gt; 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0,…\n$ AGE  &lt;dbl&gt; 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 2…\n$ SEX  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ RACE &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,…\n$ WT   &lt;dbl&gt; 94.3, 94.3, 94.3, 94.3, 94.3, 94.3, 94.3, 94.3, 94.3, 94.3, 94.3,…\n$ HT   &lt;dbl&gt; 1.769997, 1.769997, 1.769997, 1.769997, 1.769997, 1.769997, 1.769…\n\n\nThe data set contains 2678 observations and 17 variables. code to make a plot that shows a line for each individual, with DV on the y-axis and time on the x-axis. Stratify by dose\n\nMavo_data%&gt;%\n  ggplot(aes(x=TIME, y= DV, group = ID,  color= factor(DOSE)))+\n  geom_line()+ \n    labs(title = \"DV over Time Stratified by Dose\",\n       x = \"Time\",\n       y = \"Outcome Variable (DV)\",\n       color = \"Dose\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nKeeping observations with OCC= 1\n\nMavo_data2&lt;- Mavo_data%&gt;%\n filter(OCC!=2) # this will exclude everyone with occ=2.\n\nlets exclude everyone with everyone with time =0. and then create a another variable Y which is the sum of DV\n\nclass(Mavo_data2)\n\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n\n\n\nsummary_data &lt;- Mavo_data2 %&gt;%\n  filter(TIME != 0) %&gt;%  # Remove rows where TIME = 0\n   dplyr::group_by(ID) %&gt;%\n  dplyr::summarize(Y = sum(DV, na.rm = TRUE), .groups = \"drop\")  # Sum DV for each individual\n\nprint(summary_data)  \n\n# A tibble: 120 × 2\n      ID     Y\n   &lt;dbl&gt; &lt;dbl&gt;\n 1   793 2691.\n 2   794 2639.\n 3   795 2150.\n 4   796 1789.\n 5   797 3126.\n 6   798 2337.\n 7   799 3007.\n 8   800 2796.\n 9   801 3866.\n10   802 1762.\n# ℹ 110 more rows\n\n\ncreating a data frame that contains observations with time =0.\n\nMavo_data3&lt;-Mavo_data2 %&gt;%\n  filter(TIME == 0)  # includes rows where TIME = 0\n#This contains 120X17\n\nusing an appropiate join function to combine the two data frames\n\njoined_data&lt;-full_join(summary_data, Mavo_data3, by =\"ID\")\n\nConverting RACE and SEX to factor variables and keeping only these variables: Y,DOSE,AGE,SEX,RACE,WT,HT.\n\n# Converting  SEX to a factor \njoined_data$SEX &lt;- as.factor(joined_data$SEX)\n\n# Converting  race to a factor \njoined_data$RACE &lt;- as.factor(joined_data$RACE)\n\n# Check the structure of the joined dataset using the str function\nstr(joined_data)\n\ntibble [120 × 18] (S3: tbl_df/tbl/data.frame)\n $ ID  : num [1:120] 793 794 795 796 797 798 799 800 801 802 ...\n $ Y   : num [1:120] 2691 2639 2150 1789 3126 ...\n $ CMT : num [1:120] 1 1 1 1 1 1 1 1 1 1 ...\n $ EVID: num [1:120] 1 1 1 1 1 1 1 1 1 1 ...\n $ EVI2: num [1:120] 1 1 1 1 1 1 1 1 1 1 ...\n $ MDV : num [1:120] 1 1 1 1 1 1 1 1 1 1 ...\n $ DV  : num [1:120] 0 0 0 0 0 0 0 0 0 0 ...\n $ LNDV: num [1:120] 0 0 0 0 0 0 0 0 0 0 ...\n $ AMT : num [1:120] 25 25 25 25 25 25 25 25 25 25 ...\n $ TIME: num [1:120] 0 0 0 0 0 0 0 0 0 0 ...\n $ DOSE: num [1:120] 25 25 25 25 25 25 25 25 25 25 ...\n $ OCC : num [1:120] 1 1 1 1 1 1 1 1 1 1 ...\n $ RATE: num [1:120] 75 150 150 150 150 150 150 150 150 150 ...\n $ AGE : num [1:120] 42 24 31 46 41 27 23 20 23 28 ...\n $ SEX : Factor w/ 2 levels \"1\",\"2\": 1 1 1 2 2 1 1 1 1 1 ...\n $ RACE: Factor w/ 4 levels \"1\",\"2\",\"7\",\"88\": 2 2 1 1 2 2 1 4 2 1 ...\n $ WT  : num [1:120] 94.3 80.4 71.8 77.4 64.3 ...\n $ HT  : num [1:120] 1.77 1.76 1.81 1.65 1.56 ...\n\n\nfinally, we need to select the variables that we shall need for our analaysis.\n\nfinal_data&lt;-joined_data%&gt;%\n  select(Y,DOSE,AGE,SEX,RACE,WT,HT)\n\n# Save the final_data2 dataframe as an RDS file\nsaveRDS(final_data, file = here(\"fitting-exercise\", \"data\",\"final_data.rds\"))\n\nlets make some exploratory data analysis and some further cleaning\n\nsummary(final_data) #we use the summary function to see that summary statistics of each variable in the data set\n\n       Y               DOSE            AGE        SEX     RACE   \n Min.   : 826.4   Min.   :25.00   Min.   :18.00   1:104   1 :74  \n 1st Qu.:1700.5   1st Qu.:25.00   1st Qu.:26.00   2: 16   2 :36  \n Median :2349.1   Median :37.50   Median :31.00           7 : 2  \n Mean   :2445.4   Mean   :36.46   Mean   :33.00           88: 8  \n 3rd Qu.:3050.2   3rd Qu.:50.00   3rd Qu.:40.25                  \n Max.   :5606.6   Max.   :50.00   Max.   :50.00                  \n       WT               HT       \n Min.   : 56.60   Min.   :1.520  \n 1st Qu.: 73.17   1st Qu.:1.700  \n Median : 82.10   Median :1.770  \n Mean   : 82.55   Mean   :1.759  \n 3rd Qu.: 90.10   3rd Qu.:1.813  \n Max.   :115.30   Max.   :1.930  \n\n\nfrom the 120 observations,104 are males and 16 are females. thats if 1 is males and 2 is coded for females. According to the dataset we have, we are not sure since the code book was not provided.\n\n# Compute summary statistics for all continuous variables\nsummary_table&lt;- final_data %&gt;%\n  select(where(is.numeric)) %&gt;%  # Select only numeric variables\n  summarise(\n    across(\n      everything(), \n      list(\n        Mean = ~mean(.x, na.rm = TRUE),\n        Median = ~median(.x, na.rm = TRUE),\n        SD = ~sd(.x, na.rm = TRUE),\n        Min = ~min(.x, na.rm = TRUE),\n        Max = ~max(.x, na.rm = TRUE)\n      ),\n      .names = \"{.col}_{.fn}\"  # Renaming format: VariableName_Statistic\n    )\n  ) %&gt;%\n  tidyr::pivot_longer(everything(), names_to = c(\"Variable\", \"Statistic\"), names_sep = \"_\") %&gt;%\n  tidyr::pivot_wider(names_from = \"Statistic\", values_from = \"value\")\n\n# Print summary\nprint(summary_table)\n\n# A tibble: 5 × 6\n  Variable    Mean  Median       SD    Min     Max\n  &lt;chr&gt;      &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;\n1 Y        2445.   2349.   962.     826.   5607.  \n2 DOSE       36.5    37.5   11.9     25      50   \n3 AGE        33      31      8.98    18      50   \n4 WT         82.6    82.1   12.5     56.6   115.  \n5 HT          1.76    1.77   0.0855   1.52    1.93\n\n\nlets check whether there is some correlation between variables\n\n# Select only numeric columns\nnumeric_data &lt;- final_data %&gt;% select(where(is.numeric))\n\n# Compute correlation matrix\ncor_matrix &lt;- cor(numeric_data, use = \"complete.obs\")\n\n# Visualize correlation matrix\nlibrary(ggcorrplot)\n\nWarning: package 'ggcorrplot' was built under R version 4.4.3\n\nggcorrplot(cor_matrix, lab = TRUE)\n\n\n\n\n\n\n\n\nFrom the above, looks like there is no variable that is highly correlated with the other.\nlets explore our new variable Y using a histogram to see its distribution. we shall also try to explore Y by the categorical variables\n\n# Histogram of Y variable (sum of DV)\nggplot(final_data, aes(x = Y)) + \n  geom_histogram(bins = 30, fill = \"blue\", alpha = 0.7) + \n  theme_minimal() + \n  labs(title = \"Distribution of Y\")\n\n\n\n\n\n\n\nggplot(final_data, aes(x = SEX, y = Y, fill = SEX)) + \n  geom_boxplot() + \n  theme_minimal() + \n  labs(title = \"Y by SEX\")\n\n\n\n\n\n\n\nggplot(final_data, aes(x = RACE, y = Y, fill = RACE)) + \n  geom_boxplot() + \n  theme_minimal() + \n  labs(title = \"Y by RACE\")\n\n\n\n\n\n\n\n\nFrom the above, we see that Y is not normally distributed. it appears to be right skewed which means that some individuals have high sums of DV or simply we could have some potential outliers.\nAlso, assuming males are 1 and females are 2, then males have higher DV sums compared to females.\nIn regards to race, race 1 and 2 have almost similar DV sums compared to race 7 and 88.Though race 7 has higher sum compared to race 88.\nlets see some scatter plot of Y as an outcome with the other continuous variables.\n\nfinal_data %&gt;%\nselect(Y, DOSE, AGE, WT, HT) %&gt;%\npairs()#this code will show the scatter plots of the continuous variables in the data set.\n\n\n\n\n\n\n\n\nWe shall now start working on fitting the model using linear regression and logistic regression and the interprete the outputs. Fit a linear model to the continuous outcome (Y) using the main predictor of interest, which we’ll assume here to be DOSE. Fit a linear model to the continuous outcome (Y) using all predictors. For both models, compute RMSE and R-squared and print them.\n\n#fitting a linear model with y as the outcome and dose as the predictor\nmodel1&lt;- lm(Y~DOSE,data=final_data)\nsummary(model1)\n\n\nCall:\nlm(formula = Y ~ DOSE, data = final_data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1284.91  -441.14   -97.22   325.84  2372.87 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  323.062    199.049   1.623    0.107    \nDOSE          58.213      5.194  11.208   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 672.1 on 118 degrees of freedom\nMultiple R-squared:  0.5156,    Adjusted R-squared:  0.5115 \nF-statistic: 125.6 on 1 and 118 DF,  p-value: &lt; 2.2e-16\n\n\nLets try fitting Y with all the predictors.\n\nmodel2&lt;-lm(Y~ DOSE+AGE+SEX+RACE+WT+HT, data = final_data)\nsummary(model2)\n\n\nCall:\nlm(formula = Y ~ DOSE + AGE + SEX + RACE + WT + HT, data = final_data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1480.86  -367.81   -79.95   266.15  2431.52 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 3386.863   1835.153   1.846 0.067623 .  \nDOSE          59.935      4.880  12.281  &lt; 2e-16 ***\nAGE            3.155      7.825   0.403 0.687530    \nSEX2        -357.734    216.928  -1.649 0.101957    \nRACE2        155.034    128.627   1.205 0.230650    \nRACE7       -405.320    448.189  -0.904 0.367768    \nRACE88       -53.505    244.668  -0.219 0.827296    \nWT           -23.047      6.395  -3.604 0.000471 ***\nHT          -748.487   1103.979  -0.678 0.499188    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 614.3 on 111 degrees of freedom\nMultiple R-squared:  0.6193,    Adjusted R-squared:  0.5919 \nF-statistic: 22.57 on 8 and 111 DF,  p-value: &lt; 2.2e-16\n\n\ncomputing the RMSE and the R squared of the models\n\nr_squared_model1 &lt;- summary(model1)$r.squared\nr_squared_model2 &lt;- summary(model2)$r.squared\n\n#computing the RMSE\nrmse_model1 &lt;- sqrt(mean(model1$residuals^2))\nrmse_model2 &lt;- sqrt(mean(model2$residuals^2))\n\n#Printing the rsmes and the r-squared\nprint(paste(\"Model 1 - RMSE:\", rmse_model1, \"R-squared:\", r_squared_model1))\n\n[1] \"Model 1 - RMSE: 666.461786979191 R-squared: 0.515644568717372\"\n\nprint(paste(\"Model 2 - RMSE:\", rmse_model2, \"R-squared:\", r_squared_model2))\n\n[1] \"Model 2 - RMSE: 590.853471477795 R-squared: 0.61930843824483\"\n\n\nFit a logistic model to the categorical/binary outcome (SEX) using the main predictor of interest, which we’ll again assume here to be DOSE. Fit a logistic model to SEX using all predictors. For both models, compute accuracy and ROC-AUC and print them.\nLet us try to fit another model with sex as the outcome\n\n# Fit logistic regression model with sex as the outcome and dose as the predictor.\nlogit_model1 &lt;- glm(SEX ~ DOSE, data = final_data, family = binomial(link = \"logit\"))\n\n# Fit logistic regression model with sex as the outcome and all the predictors.\nlogit_model2 &lt;- glm(SEX ~ Y+ DOSE + AGE + RACE + WT + HT, data = final_data, family = binomial)\n\nprint(summary(logit_model1))\n\n\nCall:\nglm(formula = SEX ~ DOSE, family = binomial(link = \"logit\"), \n    data = final_data)\n\nCoefficients:\n            Estimate Std. Error z value Pr(&gt;|z|)\n(Intercept) -0.76482    0.85395  -0.896    0.370\nDOSE        -0.03175    0.02432  -1.306    0.192\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 94.242  on 119  degrees of freedom\nResidual deviance: 92.431  on 118  degrees of freedom\nAIC: 96.431\n\nNumber of Fisher Scoring iterations: 5\n\nprint(summary(logit_model2))\n\n\nCall:\nglm(formula = SEX ~ Y + DOSE + AGE + RACE + WT + HT, family = binomial, \n    data = final_data)\n\nCoefficients:\n              Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)  6.033e+01  1.804e+01   3.345 0.000824 ***\nY           -1.040e-03  9.628e-04  -1.081 0.279840    \nDOSE        -3.076e-02  7.761e-02  -0.396 0.691893    \nAGE          8.340e-02  6.074e-02   1.373 0.169724    \nRACE2       -1.927e+00  1.375e+00  -1.402 0.160967    \nRACE7        1.176e-01  3.846e+00   0.031 0.975604    \nRACE88      -1.500e+00  2.195e+00  -0.683 0.494317    \nWT          -6.283e-02  7.942e-02  -0.791 0.428908    \nHT          -3.320e+01  1.108e+01  -2.995 0.002744 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 94.242  on 119  degrees of freedom\nResidual deviance: 32.077  on 111  degrees of freedom\nAIC: 50.077\n\nNumber of Fisher Scoring iterations: 8\n\n\nLet us try to calculate the odds ratios so as we can interprete these results better\n\n# Extract the model coefficients for model 1\ncoefficients &lt;- summary(logit_model1)$coefficients[, 1]\n\n# Calculate the odds ratios by exponentiating the coefficients\nodds_ratios &lt;- exp(coefficients)\n\n# Print the odds ratios\nprint(odds_ratios)\n\n(Intercept)        DOSE \n  0.4654186   0.9687444 \n\n# Extract the model coefficients for model 2\ncoefficients &lt;- summary(logit_model2)$coefficients[, 1]\n\n# Calculate the odds ratios by exponentiating the coefficients\nodds_ratios_2&lt;- exp(coefficients)\n\n# Print the odds ratios\nprint(odds_ratios_2)\n\n (Intercept)            Y         DOSE          AGE        RACE2        RACE7 \n1.580962e+26 9.989601e-01 9.697122e-01 1.086982e+00 1.455289e-01 1.124824e+00 \n      RACE88           WT           HT \n2.231023e-01 9.391076e-01 3.829605e-15 \n\n\nwe shall then compute the accuracy and ROC-AUC and print them.\n\n# Model with only DOSE\npredicted_probs1 &lt;- predict(logit_model1, type = \"response\")  # Probabilities for SEX\n\n# Model with all predictors\npredicted_probs2 &lt;- predict(logit_model2, type = \"response\")\n\n# Convert probabilities to binary class (0 or 1)\npredicted_class1 &lt;- ifelse(predicted_probs1 &gt; 0.5, 1, 0)\npredicted_class2 &lt;- ifelse(predicted_probs2 &gt; 0.5, 1, 0)\n\n# Accuracy calculation\naccuracy1 &lt;- mean(predicted_class1 == final_data$SEX)\naccuracy2 &lt;- mean(predicted_class2 == final_data$SEX)\n\nprint(paste(\"Logit mode 1 - Accuracy:\", accuracy1))\n\n[1] \"Logit mode 1 - Accuracy: 0\"\n\nprint(paste(\"Logit Model 2 - Accuracy:\", accuracy2))\n\n[1] \"Logit Model 2 - Accuracy: 0.025\"\n\n\nComputing the ROC-AUC\n\nlibrary(pROC)             # this package will help us calculate the roc-auc\n\nWarning: package 'pROC' was built under R version 4.4.2\n\n\nType 'citation(\"pROC\")' for a citation.\n\n\n\nAttaching package: 'pROC'\n\n\nThe following objects are masked from 'package:stats':\n\n    cov, smooth, var\n\n# Compute AUC for both models\nauc1 &lt;- roc(final_data$SEX, predicted_probs1)$auc\n\nSetting levels: control = 1, case = 2\n\n\nSetting direction: controls &lt; cases\n\nauc2 &lt;- roc(final_data$SEX, predicted_probs2)$auc\n\nSetting levels: control = 1, case = 2\nSetting direction: controls &lt; cases\n\nprint(paste(\"Logit Model 1 - AUC:\", auc1))\n\n[1] \"Logit Model 1 - AUC: 0.591947115384615\"\n\nprint(paste(\"Logit Model 2 - AUC:\", auc2))\n\n[1] \"Logit Model 2 - AUC: 0.979567307692308\"\n\n\nWe fitted the data to a linear model and a logistic regression model. When we fitted the linear regression model to the data, in the first model, we found that DOSE is a strong predictor of Y:\nThe coefficient (Estimate = 58.213) suggests that for every unit increase in DOSE, Y increases by approximately 58.21. This effect is highly significant (p &lt; 2e-16), meaning there is strong evidence that DOSE impacts Y.\nLooking at the R-squared of this first linear model, we found that the simple linear model had an R-squared = 0.5156, meaning 51.56% of the variance in Y is explained by DOSE alone.\nWhile DOSE is a significant predictor, the model might be too simple, as nearly half of the variation in Y is not explained which suggests that other variables might be important. As a result, we decided to fit the second linear model but this time around with other variables. Second Model: Y ~ DOSE + AGE + SEX + RACE + WT + HT DOSE remains a strong predictor:\nThe coefficient (Estimate = 59.935) is similar to the first model and still highly significant (p &lt; 2e-16).\nAdditional variables:\nWT (Weight) is also significant (p = 0.000471), with a negative coefficient (-23.047), suggesting that a unit increase in weight decreases, Y. SEX, AGE, and RACE do not contribute meaningful to prediction to Y in this dataset. HT (Height) also does not appear to impact Y.\nModel fit improved:\nR-squared increased to 0.6193, meaning 61.93% of Y’s variance is explained by this model—better than the first model. In conclusion, DOSE remains the strongest predictor in both models, Adding more variables improves model fit, but only WT shows a significant effect in addition to DOSE.\nSecondly,when we fitted a logistic regression with sex as the main outcome, first we fitted the model with only dose as a predictor\nThe coefficient for DOSE is -0.03175, meaning that as DOSE increases, the log-odds of the outcome (SEX) decrease slightly, but this effect is not statistically significant (p = 0.192). The Intercept represents the baseline log-odds when DOSE = 0.\nWe fitted the second model with sex as the outcome this time round with other predictors. That is to say, SEX ~ Y + DOSE + AGE + RACE + WT + HT. This is a multivariable logistic regression, including multiple predictors. HT (Height) has a significant negative association with SEX (Estimate = -33.2, p = 0.0027). This suggests that an increase in height strongly decreases the log-odds of the outcome.\nOther variables (Y, DOSE, AGE, RACE, WT) do not have significant p-values (&gt; 0.05), meaning their effects are not strong enough to conclude they impact SEX.\nLooking at the residual Deviance (32.077) is much lower than in the first model (92.431), suggesting the second model explains the data much better. AIC (50.077) in this second model is significantly lower than the first model’s AIC (96.431), meaning the second model fits better.\nIn conclusion, large AUC gap (0.592 vs. 0.980) confirms that adding more predictors greatly improves the model’s ability to differentiate between classes. The model with more predictors has better predictive power and is better.\n\nfinal_data2&lt;-final_data%&gt;%\n  select( Y, DOSE, AGE, SEX, WT, HT)\ncolnames(final_data2)\n\n[1] \"Y\"    \"DOSE\" \"AGE\"  \"SEX\"  \"WT\"   \"HT\"  \n\n\n\nlibrary(tidymodels)\n\nWarning: package 'tidymodels' was built under R version 4.4.3\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ──\n\n\n✔ broom        1.0.7     ✔ rsample      1.2.1\n✔ dials        1.4.0     ✔ tune         1.3.0\n✔ infer        1.0.7     ✔ workflows    1.2.0\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.3.1     ✔ yardstick    1.3.2\n✔ recipes      1.2.0     \n\n\nWarning: package 'broom' was built under R version 4.4.3\n\n\nWarning: package 'dials' was built under R version 4.4.3\n\n\nWarning: package 'infer' was built under R version 4.4.2\n\n\nWarning: package 'modeldata' was built under R version 4.4.3\n\n\nWarning: package 'parsnip' was built under R version 4.4.3\n\n\nWarning: package 'rsample' was built under R version 4.4.3\n\n\nWarning: package 'tune' was built under R version 4.4.3\n\n\nWarning: package 'workflows' was built under R version 4.4.3\n\n\nWarning: package 'workflowsets' was built under R version 4.4.3\n\n\nWarning: package 'yardstick' was built under R version 4.4.3\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard()    masks purrr::discard()\n✖ dplyr::filter()      masks stats::filter()\n✖ recipes::fixed()     masks stringr::fixed()\n✖ dplyr::lag()         masks stats::lag()\n✖ yardstick::spec()    masks readr::spec()\n✖ Hmisc::src()         masks dplyr::src()\n✖ recipes::step()      masks stats::step()\n✖ Hmisc::summarize()   masks dplyr::summarize()\n✖ parsnip::translate() masks Hmisc::translate()\n\n#setting seed\nset.seed(1234)\n# Put 3/4 of the data into the training set \ndata_split &lt;- initial_split(final_data2, prop = 3/4)\n\n# Create data frames for the two sets:\ntrain_data &lt;- training(data_split)\ntest_data  &lt;- testing(data_split)\n\n# Check dimensions to ensure the data has been split successfully.\ndim(train_data)\n\n[1] 90  6\n\ndim(test_data)\n\n[1] 30  6\n\n\nfitting the linear models using the train data.\n\ntrain_model&lt;-lm(Y~DOSE, data = train_data)\ntrain_model2&lt;-lm(Y~DOSE+AGE + SEX +WT +  HT , data = train_data)\ntrain_null &lt;-lm(Y~ 1, data = train_data)\nsummary(train_null)\n\n\nCall:\nlm(formula = Y ~ 1, data = train_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1682.7  -705.9  -110.9   595.0  3097.4 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   2509.2      100.5   24.96   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 953.7 on 89 degrees of freedom\n\nsummary(train_model)\n\n\nCall:\nlm(formula = Y ~ DOSE, data = train_data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1257.85  -492.00   -71.31   370.71  2399.93 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  535.455    244.017   2.194   0.0308 *  \nDOSE          53.424      6.286   8.499 4.41e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 710.7 on 88 degrees of freedom\nMultiple R-squared:  0.4508,    Adjusted R-squared:  0.4446 \nF-statistic: 72.23 on 1 and 88 DF,  p-value: 4.406e-13\n\nsummary(train_model2)\n\n\nCall:\nlm(formula = Y ~ DOSE + AGE + SEX + WT + HT, data = train_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1474.2  -438.0  -119.7   330.2  2394.6 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  4396.7716  2169.6373   2.027   0.0459 *  \nDOSE           55.3445     5.8310   9.491 6.09e-15 ***\nAGE            -0.4174     9.5029  -0.044   0.9651    \nSEX2         -568.9967   285.4443  -1.993   0.0495 *  \nWT            -22.6399     7.6499  -2.960   0.0040 ** \nHT          -1129.6696  1358.3998  -0.832   0.4080    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 649.5 on 84 degrees of freedom\nMultiple R-squared:  0.5623,    Adjusted R-squared:  0.5362 \nF-statistic: 21.58 on 5 and 84 DF,  p-value: 7.9e-14\n\n\nlets evaluate performance and see how these two models work on the training data\n\n# Generate predictions on training data\n#For null mode\npred_null&lt;- predict(train_null, train_data)\n# For model 1 (dose only)\npred_model1 &lt;- predict(train_model, train_data)\n\n# For model 2 (all predictors)\npred_model2 &lt;- predict(train_model2, train_data)\n\n# Let's Calculate RMSE for each model\n# First, get the actual outcome values\nactual_values &lt;- train_data$Y \n\n# Calculate RMSE manually for null model \nrmse_null &lt;- sqrt(mean((actual_values - pred_null)^2))\n\n# Calculate RMSE manually for model 1\nrmse_model1 &lt;- sqrt(mean((actual_values - pred_model1)^2))\n\n# Calculate RMSE manually for model 2\nrmse_model2 &lt;- sqrt(mean((actual_values - pred_model2)^2))\n\n# Print results\ncat(\"RMSE for null model :\", rmse_null, \"\\n\")\n\nRMSE for null model : 948.3526 \n\ncat(\"RMSE for model with dose only:\", rmse_model1, \"\\n\")\n\nRMSE for model with dose only: 702.8078 \n\ncat(\"RMSE for model with all predictors:\", rmse_model2, \"\\n\")\n\nRMSE for model with all predictors: 627.4408 \n\n\nAccording to the values of the RMSE, we see that the model with all predictors is performing well since its has the smallest value of the RMSE.\nLets try using the cv method\n\nlibrary(rsample)\n\n# Create 10-fold CV object\nfolds &lt;- vfold_cv(train_data, v = 10)\n\n# Define model specifications\nlm_spec &lt;- linear_reg() %&gt;% \n  set_engine(\"lm\")\n\n# Model 1: Dose only model\nmodel1_formula &lt;- Y ~ DOSE # Replace 'outcome' with your actual outcome variable name\n\n# Model 2: All predictors\nmodel2_formula &lt;- Y ~ .  # Replace 'outcome' with your actual outcome variable name\n\n# Function to evaluate a model with CV\ncv_evaluate &lt;- function(formula, model_spec, folds_obj) {\n  # Fit the model to each fold and evaluate\n  cv_results &lt;- folds_obj %&gt;% \n    mutate(\n      # Fit model on analysis set\n      model = map(splits, ~model_spec %&gt;% \n                    fit(formula, data = analysis(.x))),\n      \n      # Make predictions and calculate RMSE on assessment set\n      pred = map2(model, splits, ~predict(.x, new_data = assessment(.y))),\n      \n      rmse = map2_dbl(pred, splits, ~rmse_vec(\n        truth = assessment(.y)[[all.vars(formula)[1]]], \n        estimate = .x$.pred\n      ))\n    )\n  \n  # Return the results\n  return(cv_results)\n}\n\n# Apply CV to both models\ncv_results_model1 &lt;- cv_evaluate(model1_formula, lm_spec, folds)\ncv_results_model2 &lt;- cv_evaluate(model2_formula, lm_spec, folds)\n\n# Calculate mean RMSE across all folds\nmean_rmse_model1 &lt;- mean(cv_results_model1$rmse)\nmean_rmse_model2 &lt;- mean(cv_results_model2$rmse)\n\n# Calculate standard errors\nse_rmse_model1 &lt;- sd(cv_results_model1$rmse) / sqrt(10)\nse_rmse_model2 &lt;- sd(cv_results_model2$rmse) / sqrt(10)\n\n# Print results\ncat(\"Model 1 (dose only) - CV Results:\\n\")\n\nModel 1 (dose only) - CV Results:\n\ncat(\"  Mean RMSE:\", mean_rmse_model1, \"\\n\")\n\n  Mean RMSE: 691.2123 \n\ncat(\"  Standard Error:\", se_rmse_model1, \"\\n\\n\")\n\n  Standard Error: 69.81814 \n\ncat(\"Model 2 (all predictors) - CV Results:\\n\")\n\nModel 2 (all predictors) - CV Results:\n\ncat(\"  Mean RMSE:\", mean_rmse_model2, \"\\n\")\n\n  Mean RMSE: 639.8914 \n\ncat(\"  Standard Error:\", se_rmse_model2, \"\\n\\n\")\n\n  Standard Error: 72.42021 \n\n# Show individual fold results\ncat(\"Model 1 - RMSE for each fold:\\n\")\n\nModel 1 - RMSE for each fold:\n\nprint(cv_results_model1$rmse)\n\n [1]  646.3712 1147.0091  959.4708  505.9775  707.5676  707.4310  562.7030\n [8]  415.8754  735.4318  524.2853\n\ncat(\"\\nModel 2 - RMSE for each fold:\\n\")\n\n\nModel 2 - RMSE for each fold:\n\nprint(cv_results_model2$rmse)\n\n [1]  613.6833  951.8855 1013.5318  760.2155  686.1963  670.7323  569.6953\n [8]  332.0084  365.3981  435.5673\n\n\nComparing the RMSE for CV With the previous RMS.\nFor model 1, the previous RMSE is 702.8078 while the cv RMSE is is 676.8427 For model 2, the previous RMSE is 627.441 while the cv RMSE is is 625.9641\nWhat changed and what did not change.\nwe see that there was a change in the RMSE for model 1 when we used the cross validation technique. The values of RSME dropped. However, there were no major changes in the the RSME in model two. The valued still reduced but by only 2 units.\nWhat didn’t change:\nThe null model RMSE remains the same regardless of the evaluation method since it always predicts the same value which is the mean.\nStandard errors:\nModel 2 has a lower standard error compared to model1 which contains only dose as a predictor. This shows that model 2 has a better variability in model performance across different subsets of data.\nlets set another seed.\n\n# Set a different random number seed\nset.seed(4567)  # Using a different seed than before\n\n# Create new 10-fold CV object with the new seed\nnew_folds &lt;- vfold_cv(train_data, v = 10)\n\n# Apply CV to both models using the new folds\ncv_results_model1_new &lt;- cv_evaluate(model1_formula, lm_spec, new_folds)\ncv_results_model2_new &lt;- cv_evaluate(model2_formula, lm_spec, new_folds)\n\n# Calculate mean RMSE across all folds with new seed\nmean_rmse_model1_new &lt;- mean(cv_results_model1_new$rmse)\nmean_rmse_model2_new &lt;- mean(cv_results_model2_new$rmse)\n\n# Calculate standard errors with new seed\nse_rmse_model1_new &lt;- sd(cv_results_model1_new$rmse) / sqrt(10)\nse_rmse_model2_new &lt;- sd(cv_results_model2_new$rmse) / sqrt(10)\n\n# Print comparison of results with different seeds\ncat(\"Comparison of CV results with different random seeds:\\n\\n\")\n\nComparison of CV results with different random seeds:\n\ncat(\"Model 1 (dose only):\\n\")\n\nModel 1 (dose only):\n\ncat(\"  - Mean RMSE with seed 1234:\", mean_rmse_model1, \"\\n\")\n\n  - Mean RMSE with seed 1234: 691.2123 \n\ncat(\"  - Mean RMSE with seed 4567:\", mean_rmse_model1_new, \"\\n\")\n\n  - Mean RMSE with seed 4567: 705.3799 \n\ncat(\"  - Difference:\", mean_rmse_model1_new - mean_rmse_model1, \"\\n\")\n\n  - Difference: 14.16766 \n\ncat(\"  - Standard Error with seed 1234:\", se_rmse_model1, \"\\n\")\n\n  - Standard Error with seed 1234: 69.81814 \n\ncat(\"  - Standard Error with seed 4567:\", se_rmse_model1_new, \"\\n\\n\")\n\n  - Standard Error with seed 4567: 55.28695 \n\ncat(\"Model 2 (all predictors):\\n\")\n\nModel 2 (all predictors):\n\ncat(\"  - Mean RMSE with seed 1234:\", mean_rmse_model2, \"\\n\")\n\n  - Mean RMSE with seed 1234: 639.8914 \n\ncat(\"  - Mean RMSE with seed 4567:\", mean_rmse_model2_new, \"\\n\")\n\n  - Mean RMSE with seed 4567: 650.1592 \n\ncat(\"  - Difference:\", mean_rmse_model2_new - mean_rmse_model2, \"\\n\")\n\n  - Difference: 10.26786 \n\ncat(\"  - Standard Error with seed 1234:\", se_rmse_model2, \"\\n\")\n\n  - Standard Error with seed 1234: 72.42021 \n\ncat(\"  - Standard Error with seed 4567:\", se_rmse_model2_new, \"\\n\\n\")\n\n  - Standard Error with seed 4567: 57.96715 \n\n# Check if the conclusion about which model is better remains the same\nbetter_model_seed123 &lt;- ifelse(mean_rmse_model1 &lt; mean_rmse_model2, \"Model 1\", \"Model 2\")\nbetter_model_seed456 &lt;- ifelse(mean_rmse_model1_new &lt; mean_rmse_model2_new, \"Model 1\", \"Model 2\")\n\ncat(\"Better performing model:\\n\")\n\nBetter performing model:\n\ncat(\"  - With seed 1234:\", better_model_seed123, \"\\n\")\n\n  - With seed 1234: Model 2 \n\ncat(\"  - With seed 4567:\", better_model_seed456, \"\\n\")\n\n  - With seed 4567: Model 2 \n\n\nThe overall performing model is still model 2 that has all the predictors. The changes we see are due to randomness maybe because of the seed change but generally, model 2 is still performing better than model 1.\n\nThis section is contributed by PRASANGA PAUDEL\nWE will first define the three models:\n\nModel with only DOSE as predictor.\nModel with ALL predictors.\nModel with no predictors.\n\n\n# Fitting the models\ntrain_model &lt;- lm(Y ~ DOSE, data = train_data) #model1\ntrain_model2 &lt;- lm(Y ~ DOSE + AGE + SEX + WT + HT, data = train_data) #model2\ntrain_null &lt;- lm(Y ~ 1, data = train_data) #model3\n\n# Generating predictions for each model\ntrain_data$pred_model1 &lt;- predict(train_model, newdata = train_data)\ntrain_data$pred_model2 &lt;- predict(train_model2, newdata = train_data)\ntrain_data$pred_null &lt;- predict(train_null, newdata = train_data)\n\n# Creating a data frame with observed and predicted values for three models\nresults &lt;- data.frame(\n  Observed = train_data$Y,\n  Predicted_DOSE = train_data$pred_model1,\n  Predicted_ALL = train_data$pred_model2,\n  Predicted_NULL = train_data$pred_null)\n\n\n# printing the results\nhead(results)\n\n  Observed Predicted_DOSE Predicted_ALL Predicted_NULL\n1  3004.21       3206.650      3303.028       2509.171\n2  1346.62       1871.052      1952.556       2509.171\n3  2771.69       2538.851      2744.878       2509.171\n4  2027.60       1871.052      2081.182       2509.171\n5  2353.40       3206.650      2894.205       2509.171\n6   826.43       1871.052      1264.763       2509.171\n\n\nThe predicted values can be observed in the above table.\n\n# Reshaping the data into long format for ggplot plotting\nresults_long &lt;- results %&gt;%\n  pivot_longer(\n    cols = starts_with(\"Predicted_\"),\n    names_to = \"Model\",\n    values_to = \"Predicted\"\n  )\n\n# Creating the plot\nggplot(results_long, aes(x = Observed, y = Predicted, color = Model, shape = Model)) +\n  geom_point(size = 3, alpha = 0.7) +  # Adding points for observed vs predicted\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"black\") +  # Add 45-degree line\n  facet_wrap(~ Model, ncol = 3) +  # using facet by model\n  scale_x_continuous(limits = c(0, 5000)) +  # setting x-axis limits\n  scale_y_continuous(limits = c(0, 5000)) +  # setting y-axis limits\n  labs(\n    x = \"Observed Values\",\n    y = \"Predicted Values\",\n    title = \"Observed vs Predicted Values for Each Model\",\n    color = \"Model\",\n    shape = \"Model\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    strip.text = element_text(size = 12, face = \"bold\")\n  )\n\nWarning: Removed 3 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nWe can observe that the model with all predictors shows a better fit and less deviance between observed and the predicted values.The DOSE has three categories and only takes three values, thus shows a band of three. The prediction for NULL model is linear as we fitted the model with a constant.\n\n# adding predictions and residuals to the data\nresults &lt;- results %&gt;% mutate(Residuals_Model2 = Predicted_ALL - Observed)\n\n# creating the plot\nggplot(results, aes(x = Predicted_ALL, y = Residuals_Model2)) +\n  geom_point(size = 3, alpha = 0.7, color = \"blue\") +  # adding points for predicted vs residuals\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"red\") +  # Add horizontal line at 0\n  labs(\n    x = \"Predicted Values (Model 2)\",\n    y = \"Residuals (Predicted - Observed)\",\n    title = \"Predicted vs Residuals for Model 2\",\n    subtitle = \"Negative residuals are more and higher\"\n  ) +\n  scale_y_continuous(limits = c(-max(abs(results$Residuals_Model2)), max(abs(results$Residuals_Model2)))) +  \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    plot.subtitle = element_text(size = 12),\n    axis.title = element_text(size = 14),\n    axis.text = element_text(size = 12)\n  )\n\n\n\n\n\n\n\n\n\n# Loading libraries\nlibrary(rsample)\nlibrary(dplyr)\nlibrary(purrr)\n\n# set the random seed back to rngseed\nset.seed(1234)\n\n# Create 100 bootstrap samples from the training data\nboot_samples &lt;- bootstraps(train_data, times = 100)\n\n# defining a function to fit Model 2 and make predictions\nfit_and_predict &lt;- function(split) {\n  # saving the bootstrap sample\n  bootstrap_data &lt;- analysis(split)\n  \n  # fitting Model 2 (Y ~ DOSE + AGE + SEX + WT + HT) to the bootstrap sample\n  model2 &lt;- lm(Y ~ DOSE + AGE + SEX + WT + HT, data = bootstrap_data)\n  \n  # making predictions for the original training data\n  predict(model2, newdata = train_data)\n}\n\n# using the function to each bootstrap sample and store predictions\npredictions_list &lt;- map(boot_samples$splits, fit_and_predict)\n\n# converting the list of predictions to a matrix (array)\npredictions_matrix &lt;- do.call(rbind, predictions_list)\n\n# calculating median and 95% confidence intervals for each data point\npred_summary &lt;- predictions_matrix |&gt;\n  apply(2, quantile, probs = c(0.025, 0.5, 0.975)) |&gt;\n  t() |&gt;\n  as.data.frame() |&gt;\n  setNames(c(\"Lower_CI_Median\", \"Pred_Median\", \"Upper_CI_Median\"))\n\n# calulating mean and 95% confidence intervals for each data point\nmean_ci &lt;- predictions_matrix |&gt;\n  apply(2, function(x) {\n    mean_val &lt;- mean(x)\n    se &lt;- sd(x) / sqrt(length(x))  # standard error of the mean\n    lower_ci &lt;- mean_val - 1.96 * se  # 95% CI lower bound\n    upper_ci &lt;- mean_val + 1.96 * se  # 95% CI upper bound\n    c(lower_ci, mean_val, upper_ci)\n  }) |&gt;\n  t() |&gt;\n  as.data.frame() |&gt;\n  setNames(c(\"Lower_CI_Mean\", \"Pred_Mean\", \"Upper_CI_Mean\"))\n\n# merging median and mean summaries\npred_summary &lt;- cbind(pred_summary, mean_ci)\n\n# adding the observed values from the training data\npred_summary$Observed &lt;- train_data$Y\n\n# printing the updated summary\nhead(pred_summary)\n\n  Lower_CI_Median Pred_Median Upper_CI_Median Lower_CI_Mean Pred_Mean\n1        3083.086    3335.818        3586.619      3298.832  3327.341\n2        1645.772    1945.359        2232.636      1912.742  1944.126\n3        2556.181    2764.634        2974.479      2737.023  2757.878\n4        1722.745    2085.856        2435.738      2034.530  2073.550\n5        2645.607    2933.091        3197.893      2883.842  2914.454\n6        1001.184    1298.528        1547.160      1254.406  1283.881\n  Upper_CI_Mean Observed\n1      3355.850  3004.21\n2      1975.511  1346.62\n3      2778.734  2771.69\n4      2112.570  2027.60\n5      2945.066  2353.40\n6      1313.356   826.43\n\n\nThe confidence interval for both the predicted median and mean is presented in the table above along with the observed value.\n\n# adding the original predictions to the summary table\npred_summary$Original_Predictions &lt;- predict(lm(Y ~ DOSE + AGE + SEX + WT + HT, data = train_data), newdata = train_data)\n\n# reating the plot\nggplot(pred_summary, aes(x = Observed)) +\n  geom_point(aes(y = Original_Predictions), color = \"lightgreen\", size = 2, alpha = 0.8, shape = 16) +  # Original predictions (point estimate)\n  geom_point(aes(y = Pred_Median), color = \"blue\", size = 1.5, alpha = 0.8, shape = 10) +  # Median of bootstrap predictions (as points)\n  geom_errorbar(aes(ymin = Lower_CI_Median, ymax = Upper_CI_Median), color = \"darkgrey\", width = 0.2) +  # 95% CI for median\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"black\") +  # 45-degree line\n  labs(\n    x = \"Observed Values\",\n    y = \"Predicted Values\",\n    title = \"Observed vs Predicted Values with Bootstrap Confidence Intervals\",\n    subtitle = \"Green: Original Predictions, Blue: Median, Grey: 95% CI for Median\"\n  ) +\n  scale_x_continuous(limits = c(0, max(pred_summary$Observed, pred_summary$Upper_CI_Median))) +  # x-axis limits\n  scale_y_continuous(limits = c(0, max(pred_summary$Observed, pred_summary$Upper_CI_Median))) +  #y-axis limits\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    plot.subtitle = element_text(size = 12),\n    axis.title = element_text(size = 14),\n    axis.text = element_text(size = 12)\n  )\n\n\n\n\n\n\n\n\nThe median predictions obtained from bootstrapping procedure are almost simiar and overlap with the original predictions. A lot of the CI seem to cross the 45 degree line which means that the predicted and observed were fairly similar.However, the predicted values are mostly higher as they lie above the 45-degree line.\npart 3. lets see how the model works on the test data.\n\n#finding prediction on the test data set using the training data model 2.\n# Generate predictions for test data\ntest_predictions &lt;- predict(train_model2, newdata = test_data)\n\nlets make a combined data set so that we can be able to make the visualisation of the model on the two data sets.\n\n# Create a plot comparing train and test predictions\n\n# Prepare train data for plotting\ntrain_results &lt;- data.frame(\n  observed = train_data$Y, \n  predicted = predict(train_model2, newdata = train_data),\n  dataset = \"Training\"\n)\n\n# Prepare test data for plotting\ntest_results &lt;- data.frame(\n  observed = test_data$Y,  \n  predicted = test_predictions,\n  dataset = \"Test\"\n)\n\n# Combine the data\nall_results &lt;- rbind(train_results, test_results)\n\nLets go ahead and make visualisations of the data\n\n# Create the plot\nggplot(all_results, aes(x = observed, y = predicted, color = dataset, shape = dataset)) +\n  geom_point(alpha = 0.7) +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\") +\n  scale_color_manual(values = c(\"Training\" = \"blue\", \"Test\" = \"red\")) +\n  scale_shape_manual(values = c(\"Training\" = 16, \"Test\" = 17)) +\n  labs(\n    title = \"Model Evaluation: Predicted vs. Observed Values\",\n    x = \"Observed Values\",\n    y = \"Predicted Values\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nLooking at what we have done so far, the model we have chosen performs far better than the null.\nlooking at the performance metrics, model 1 with dose only as a predictor performs better than the null model. Model 1 has a better Rsquared and thus better adjusted R squared than the null model. Meaning that the model with only dose explains a upto 45% of the variance in Y.\nThe null model also has way bigger RMSE as compared to model 1. The null model has a larger value of AIC Compared to model 1 which makes model 1 better than the null model. If the other models were not performing better, i would consider this model since its interpretations make sense to me though this would depend on whether dose is the main predictor variable.\nModel 2 with all the predictors further improves the model. All the performances metrics suggest this model as the best model.I would definitely use this model for any real life purpose. Model 2 can explain upto 53% of the variation in Y. Looking at the residual Deviance for model 2, is much lower than in the first model, suggesting the second model explains the data much better. This model has a the lowest RMSE meaning its robust and performs better than all the other models. The values of AIC of model 2 are lower than all the values of the other two models that is null and model 1 meaning the second model fits the data better.\nThe model with more predictors has better predictive power and is better compared to model 1 and the null model.\nIn conclusion, model2 shows a clear positive correlation between observed and predicted values since the spread of predictions generally follows the actual observed values, suggesting decent predictive power. Looking at model 1 and the null model, model 2 appears to be capturing the underlying relationships. This means that and the additional predictors in the full model significantly improve prediction accuracy by accounting for variability that model1 and null model cannot explain."
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html",
    "href": "ml-models-exercise/ml-models-exercise.html",
    "title": "Lets do Data engineering.",
    "section": "",
    "text": "We shall start by loading a few packages that we think we might need for this data.\n\n\nWarning: package 'here' was built under R version 4.4.2\n\n\nWarning: package 'tidyverse' was built under R version 4.4.2\n\n\nWarning: package 'purrr' was built under R version 4.4.3\n\n\nWarning: package 'stringr' was built under R version 4.4.2\n\n\nWarning: package 'haven' was built under R version 4.4.2\n\n\nWarning: package 'Hmisc' was built under R version 4.4.2\n\n\nWarning: package 'tidymodels' was built under R version 4.4.3\n\n\nWarning: package 'broom' was built under R version 4.4.3\n\n\nWarning: package 'dials' was built under R version 4.4.3\n\n\nWarning: package 'infer' was built under R version 4.4.2\n\n\nWarning: package 'modeldata' was built under R version 4.4.3\n\n\nWarning: package 'parsnip' was built under R version 4.4.3\n\n\nWarning: package 'rsample' was built under R version 4.4.3\n\n\nWarning: package 'tune' was built under R version 4.4.3\n\n\nWarning: package 'workflows' was built under R version 4.4.3\n\n\nWarning: package 'workflowsets' was built under R version 4.4.3\n\n\nWarning: package 'yardstick' was built under R version 4.4.3\n\n\nWe shall go ahead and set the seed.\n\nset.seed(1234)  # Ensures reproducibility\n\n# Read the RDS file\nml_data&lt;- readRDS(\"data/final_data.rds\")\n\nmaking race 7 and 8 into 3\n\nml_data &lt;- ml_data %&gt;%\n  mutate(RACE = as.numeric(as.character(RACE))) %&gt;%  # Convert factor to numeric\n  mutate(RACE = case_when(\n    RACE %in% c(1, 2) ~ RACE, \n    RACE %in% c(7, 88) ~ 3,\n    TRUE ~ 4  # Ensure all cases have a numeric output\n  ))\n\n\n# Select only numeric (continuous) variables\ncontinuous_vars &lt;- ml_data %&gt;% select(where(is.numeric))\n\n# Compute correlation matrix\ncor_matrix &lt;- cor(continuous_vars, use = \"complete.obs\")  # Use only complete cases\n\nLets visualize the correlation plots and see whether we have some variables that are strongly correlated.\n\nlibrary(ggcorrplot)\n\nWarning: package 'ggcorrplot' was built under R version 4.4.3\n\n# Generate the correlation plot\nggcorrplot(cor_matrix, \n           method = \"square\",  # Use \"square\" or \"circle\" instead of \"color\"\n           type = \"lower\",      # Show only lower triangle\n           lab = TRUE,          # Display correlation values\n           lab_size = 3,        # Adjust label size\n           colors = c(\"blue\", \"white\", \"red\"),  # Color scale: Negative to positive\n           title = \"Correlation Matrix of Continuous Variables\",\n           ggtheme = theme_minimal())  # Use a clean theme\n\n\n\n\n\n\n\n\n\nLets do Data engineering.\nIntroducing a variable BMI.WE are assuming weight is in kgs and ht is in metres from the variables in the data set.\n\n# Compute BMI and add it as a new column\nml_data &lt;- ml_data %&gt;%\n  mutate(BMI = WT / (HT ^ 2))  # \n\n# Preview the data to check if BMI is added correctly\nglimpse(ml_data)\n\nRows: 120\nColumns: 8\n$ Y    &lt;dbl&gt; 2690.52, 2638.81, 2149.61, 1788.89, 3126.37, 2336.89, 3007.20, 27…\n$ DOSE &lt;dbl&gt; 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0,…\n$ AGE  &lt;dbl&gt; 42, 24, 31, 46, 41, 27, 23, 20, 23, 28, 46, 22, 43, 50, 19, 26, 3…\n$ SEX  &lt;fct&gt; 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ RACE &lt;dbl&gt; 2, 2, 1, 1, 2, 2, 1, 3, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1,…\n$ WT   &lt;dbl&gt; 94.3, 80.4, 71.8, 77.4, 64.3, 74.1, 87.9, 61.9, 65.3, 103.5, 83.0…\n$ HT   &lt;dbl&gt; 1.769997, 1.759850, 1.809847, 1.649993, 1.560052, 1.829862, 1.850…\n$ BMI  &lt;dbl&gt; 30.10, 25.96, 21.92, 28.43, 26.42, 22.13, 25.68, 20.68, 23.99, 30…\n\n\n\n#installing necessary packages\n#install.packages(\"glmnet\")\n#install.packages(\"ranger\")\nlibrary(glmnet)       # For LASSO regression\n\nWarning: package 'glmnet' was built under R version 4.4.3\n\n\nLoading required package: Matrix\n\n\n\nAttaching package: 'Matrix'\n\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\n\nLoaded glmnet 4.1-8\n\nlibrary(ranger)  \n\nWarning: package 'ranger' was built under R version 4.4.3\n\n\n\n# . Set random seed for reproducibility\nset.seed(1234)\nrngseed &lt;- 1234\n\n\n#. Create the recipe (preprocessing)\nmodel_recipe &lt;- recipe(Y ~ ., data = ml_data) %&gt;%\n  step_dummy(all_nominal_predictors()) %&gt;%   # Convert factor variables (like SEX) into numeric dummies\n  step_normalize(all_predictors()) # Optional: normalize predictors\n\n# . Model 1: Linear Model with all predictors\nlm_model &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  set_mode(\"regression\")\n\nlm_workflow &lt;- workflow() %&gt;%\n  add_recipe(model_recipe) %&gt;%\n  add_model(lm_model)\n\n# . Model 2: LASSO Regression\nlasso_model &lt;- linear_reg(penalty = 0.1, mixture = 1) %&gt;%\n  set_engine(\"glmnet\") %&gt;%\n  set_mode(\"regression\")\n\nlasso_workflow &lt;- workflow() %&gt;%\n  add_recipe(model_recipe) %&gt;%\n  add_model(lasso_model)\n\n# . Model 3: Random Forest\nrf_model &lt;- rand_forest() %&gt;%\n  set_engine(\"ranger\", seed = rngseed) %&gt;%\n  set_mode(\"regression\")\n\nrf_workflow &lt;- workflow() %&gt;%\n  add_recipe(model_recipe) %&gt;%\n  add_model(rf_model)\n\nfit the models here.\n\n# Fit the models\n# Fit each workflow to the entire data set\nlm_fit &lt;- fit(lm_workflow, data = ml_data)\nlasso_fit &lt;- fit(lasso_workflow, data = ml_data)\nrf_fit &lt;- fit(rf_workflow, data = ml_data)\n\nlet’s use the models to make predictions on the entire data set.\n\nlibrary(yardstick)\nset.seed(1234)\n#Making predictions for each model\nlm_predictions &lt;- predict(lm_fit, new_data = ml_data) %&gt;%\n  bind_cols(ml_data %&gt;% select(Y))\n\nlasso_predictions &lt;- predict(lasso_fit, new_data = ml_data) %&gt;%\n  bind_cols(ml_data %&gt;% select(Y))\n\nrf_predictions &lt;- predict(rf_fit, new_data = ml_data) %&gt;%\n  bind_cols(ml_data%&gt;% select(Y))\n\n# Calculate RMSE for each model\nlm_rmse &lt;- rmse(lm_predictions, truth = Y, estimate = .pred)\nlasso_rmse &lt;- rmse(lasso_predictions, truth = Y, estimate = .pred)\nrf_rmse &lt;- rmse(rf_predictions, truth = Y, estimate = .pred)\n\n# Print RMSE values\nprint(\"Linear Model RMSE:\")\n\n[1] \"Linear Model RMSE:\"\n\nprint(lm_rmse)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        581.\n\nprint(\"LASSO Model RMSE:\")\n\n[1] \"LASSO Model RMSE:\"\n\nprint(lasso_rmse)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        581.\n\nprint(\"Random Forest RMSE:\")\n\n[1] \"Random Forest RMSE:\"\n\nprint(rf_rmse)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        359.\n\n\nThe LASSO and linear regression give the same value of RMSE because the LASSO generally performs a linear regression. It just adds a penalty term that will help shrink some coefficients to zero but since the penalty is 0.1, this is so small and hence the model looks like a standard linear regression model.\n##Create observed vs predicted plots.\n\n# Linear Model Plot\nlm_plot &lt;- ggplot(lm_predictions, aes(x = Y, y = .pred)) +\n  geom_point(alpha = 0.5) +\n  geom_abline(slope = 1, intercept = 0, color = \"red\", linetype = \"dashed\") +\n  labs(title = \"Linear Model\",\n       x = \"Observed Values\",\n       y = \"Predicted Values\") +\n  theme_minimal()\n\n# LASSO Model Plot\nlasso_plot &lt;- ggplot(lasso_predictions, aes(x = Y, y = .pred)) +\n  geom_point(alpha = 0.5) +\n  geom_abline(slope = 1, intercept = 0, color = \"red\", linetype = \"dashed\") +\n  labs(title = \"LASSO Model\",\n       x = \"Observed Values\",\n       y = \"Predicted Values\") +\n  theme_minimal()\n\n# Random Forest Plot\nrf_plot &lt;- ggplot(rf_predictions, aes(x = Y, y = .pred)) +\n  geom_point(alpha = 0.5) +\n  geom_abline(slope = 1, intercept = 0, color = \"red\", linetype = \"dashed\") +\n  labs(title = \"Random Forest\",\n       x = \"Observed Values\",\n       y = \"Predicted Values\") +\n  theme_minimal()\n\n# 4. Arrange and display plots\nlibrary(patchwork)\ncombined_plot &lt;- lm_plot + lasso_plot + rf_plot\n\n# Display the plots\nprint(combined_plot)\n\n\n\n\n\n\n\n\n#Model tuning.\nfirst i will first tune the lasso model.\n\nlibrary(glmnet)\nlibrary(ranger)\n\n# Set random seed for reproducibility\nset.seed(1234)\n\n# Create the recipe\nmodel_recipe &lt;- recipe(Y ~ ., data = ml_data) %&gt;%\n  step_normalize(all_numeric_predictors())%&gt;%\n  step_dummy(all_nominal_predictors())\n\n# 1. LASSO Model Tuning\n# Create a grid of penalty values (50 values linearly spaced on log scale)\nlasso_penalty_grid &lt;- tibble(penalty = 10^seq(from = -5, to = 2, length.out = 50))\n\n# LASSO model specification\nlasso_model &lt;- linear_reg(penalty = tune()) %&gt;%\n  set_engine(\"glmnet\") \n \n\n# LASSO workflow\nlasso_workflow &lt;- workflow() %&gt;% add_model(lasso_model)%&gt;%\n  add_recipe(model_recipe) \n\n# Tune LASSO model\nlasso_tuning_results &lt;- lasso_workflow %&gt;%\n  tune_grid(\n    resamples = apparent(ml_data),\n    grid = lasso_penalty_grid,\n    metrics = metric_set(yardstick::rmse)\n  )\n\nMaking a plot of the lasso tunig results.\n\nlasso_tuning_results_df &lt;- as.data.frame(lasso_tuning_results$.metrics)\nggplot(lasso_tuning_results_df, aes(x=penalty, y=.estimate))+\n  geom_line(linewidth=1, color=\"blue\")+\n  scale_x_log10()+\n  labs(x=\"Log penalty parameter\", y=\"RMSE\")+\n  theme_bw()+\n  theme(axis.title.x=element_text(size=20,color=\"black\",margin=margin(t=15),face=\"bold\"),\n         axis.title.y=element_text(size=20,color=\"black\",margin=margin(r=15),face=\"bold\"),\n         axis.text.x=element_text(color=\"black\",size=17,vjust=0),\n         axis.text.y=element_text(color=\"black\",size=17,hjust=1), \n         legend.position=\"top\",\n         legend.title=element_text(size=15), \n         legend.text=element_text(size=13,vjust=0))\n\n\n\n\n\n\n\n\nwe observe that when the penalty is very small, the RMSE remains relatively constant and low. This is a good indicator that the model behaves similarly to standard linear regression. As the penalty increases, the RMSE starts to rise sharply, especially after a certain point. This shows that the model is becoming less effective in at predicting the outcome. This also means that more predictors are strongly constrained and hence the model is losing its ability to capture important relationships in the data.\nTunig parameters for Random forests model\n\n# Create a grid of tuning parameters for Random Forest\n\n# Define parameter set\nrf_param_grid &lt;- grid_regular(mtry(range=c(1, 7)),\n                        min_n(range=c(1, 21)),\n                        levels=7)\n\n\n# Random Forest model specification\nrf_model &lt;- rand_forest(\n  mtry = tune(),\n  min_n = tune(),\n  trees = 300\n) %&gt;%\n  set_engine(\"ranger\", seed = rngseed) %&gt;%\n  set_mode(\"regression\")\n\n# Workflow\nrf_workflow &lt;- workflow() %&gt;%add_model(rf_model)%&gt;%\n  add_recipe(recipe(Y ~ ., data = ml_data) %&gt;% \n               step_normalize(all_numeric_predictors())) \n  \n\n# Resamples\nrf_resamples &lt;- apparent(ml_data)\n\n# Tune model\nrf_tuning_results &lt;- rf_workflow %&gt;%\n  tune_grid(\n    resamples = rf_resamples,\n    grid = rf_param_grid,\n    metrics = metric_set(yardstick::rmse)\n  )\n\nLet us now compute the results of this radom forests and later on visualize it.\n\n#lets first turn the results into a data frame.\nrf_tuning_results_df &lt;- as.data.frame(rf_tuning_results$.metrics)\nrf_tuning_results_df\n\n   mtry min_n .metric .estimator .estimate               .config\n1     1     1    rmse   standard  495.0974 Preprocessor1_Model01\n2     2     1    rmse   standard  289.2787 Preprocessor1_Model02\n3     3     1    rmse   standard  259.9495 Preprocessor1_Model03\n4     4     1    rmse   standard  256.2424 Preprocessor1_Model04\n5     5     1    rmse   standard  256.7118 Preprocessor1_Model05\n6     6     1    rmse   standard  254.0068 Preprocessor1_Model06\n7     7     1    rmse   standard  256.6954 Preprocessor1_Model07\n8     1     4    rmse   standard  522.0807 Preprocessor1_Model08\n9     2     4    rmse   standard  337.7382 Preprocessor1_Model09\n10    3     4    rmse   standard  305.5696 Preprocessor1_Model10\n11    4     4    rmse   standard  296.6414 Preprocessor1_Model11\n12    5     4    rmse   standard  292.0848 Preprocessor1_Model12\n13    6     4    rmse   standard  288.5449 Preprocessor1_Model13\n14    7     4    rmse   standard  286.3033 Preprocessor1_Model14\n15    1     7    rmse   standard  549.0048 Preprocessor1_Model15\n16    2     7    rmse   standard  393.4873 Preprocessor1_Model16\n17    3     7    rmse   standard  359.7092 Preprocessor1_Model17\n18    4     7    rmse   standard  344.1547 Preprocessor1_Model18\n19    5     7    rmse   standard  340.5323 Preprocessor1_Model19\n20    6     7    rmse   standard  329.9023 Preprocessor1_Model20\n21    7     7    rmse   standard  328.4845 Preprocessor1_Model21\n22    1    11    rmse   standard  578.2129 Preprocessor1_Model22\n23    2    11    rmse   standard  445.5896 Preprocessor1_Model23\n24    3    11    rmse   standard  412.4917 Preprocessor1_Model24\n25    4    11    rmse   standard  401.0753 Preprocessor1_Model25\n26    5    11    rmse   standard  392.5898 Preprocessor1_Model26\n27    6    11    rmse   standard  384.9679 Preprocessor1_Model27\n28    7    11    rmse   standard  380.4646 Preprocessor1_Model28\n29    1    14    rmse   standard  596.6437 Preprocessor1_Model29\n30    2    14    rmse   standard  478.3246 Preprocessor1_Model30\n31    3    14    rmse   standard  442.5984 Preprocessor1_Model31\n32    4    14    rmse   standard  432.8817 Preprocessor1_Model32\n33    5    14    rmse   standard  421.0255 Preprocessor1_Model33\n34    6    14    rmse   standard  417.4294 Preprocessor1_Model34\n35    7    14    rmse   standard  410.6913 Preprocessor1_Model35\n36    1    17    rmse   standard  617.6599 Preprocessor1_Model36\n37    2    17    rmse   standard  501.1057 Preprocessor1_Model37\n38    3    17    rmse   standard  467.7388 Preprocessor1_Model38\n39    4    17    rmse   standard  458.8194 Preprocessor1_Model39\n40    5    17    rmse   standard  446.2865 Preprocessor1_Model40\n41    6    17    rmse   standard  443.3564 Preprocessor1_Model41\n42    7    17    rmse   standard  435.5664 Preprocessor1_Model42\n43    1    21    rmse   standard  632.0715 Preprocessor1_Model43\n44    2    21    rmse   standard  525.5032 Preprocessor1_Model44\n45    3    21    rmse   standard  495.5405 Preprocessor1_Model45\n46    4    21    rmse   standard  486.4456 Preprocessor1_Model46\n47    5    21    rmse   standard  476.0943 Preprocessor1_Model47\n48    6    21    rmse   standard  473.0993 Preprocessor1_Model48\n49    7    21    rmse   standard  468.0962 Preprocessor1_Model49\n\n#autoplot(rf_tuning_results_df)\n\n#lets visualize the random forests results.\nggplot(rf_tuning_results_df, aes(x=mtry, y=min_n, fill=.estimate)) +\n  geom_tile() +\n  scale_fill_distiller(name=\"RMSE\", palette=\"Spectral\", direction=1) + \n  labs(x=\"mtry\", y=\"min_n\") +\n  theme_bw() +\n  theme(axis.title.x=element_text(size=16,color=\"black\",margin=margin(t=15),face=\"bold\"),\n        axis.title.y=element_text(size=16,color=\"black\",margin=margin(r=15),face=\"bold\"),\n        axis.text.x=element_text(color=\"black\",size=15,vjust=0),\n        axis.text.y=element_text(color=\"black\",size=15,hjust=1), \n        legend.position=\"top\",\n        legend.title=element_text(size=16), \n        legend.text=element_text(size=12,vjust=0))\n\n\n\n\n\n\n\n\nThe out put shows that the lower RMSE is associated with high mtry and lower min_n and vice verse.\n#Tunig with CV\n\nset.seed(1234)  # Set seed for reproducibility\ncv_folds_data &lt;- vfold_cv(ml_data, v = 5, repeats = 5)  # Create cross-validation object\n\nLets define the Lasso and tune the model parameters. We are just using the cv folds but everything else remains the same.\n\nlasso_tuning_results_cv&lt;-lasso_workflow%&gt;%\n  tune_grid(resamples= cv_folds_data, grid=lasso_penalty_grid, metrics=metric_set(yardstick::rmse))\n\n# Make a plot of tuning results\nautoplot(lasso_tuning_results_cv)  \n\n\n\n\n\n\n\n\nAs the penalty parameter increases, the RMSE also increases. This looks like the behavior we saw in the first plot for lasso model.\nLets tune the model parameters of the random forests model using the same steps but using the cv folds.\n\n# Workflow to tune the parameter\nrf_tuning_results_cv &lt;- rf_workflow %&gt;% \n  tune_grid(resamples=cv_folds_data, grid=rf_param_grid, metrics=metric_set(yardstick::rmse))\n\n# Make a plot of tuning results\nautoplot(rf_tuning_results_cv)"
  },
  {
    "objectID": "presentation-exercise/visualization-exercise.html",
    "href": "presentation-exercise/visualization-exercise.html",
    "title": "Doreen Kalembe Data Analysis Portfolio",
    "section": "",
    "text": "I started by looking for the data on th fivethirtyeight page.\n“I asked AI to help me reproduce the image.\n“Ai prompt” Can you reproduce for me this image using this data set. I fed it with the data set but unfortunately, i think the Ai i am using doesnt read the data set or i dont know how to do it well.\nit gave me few prompts which i have fully written down in my quarto file of the presentations. I kept changing a few things manually till when i finally landed on what i wanted and when i realised that it is close to what i want, i had to do simple more touches and then conclude with it.\nComing to the tables, I did a feed it an ai prompt. “help me make an interactive table with these characteristics. I listed the characteristics that i wanted.” It produced the first lines of code but my data set was a little messed and hence it needed some cleaning. I went back into the code and removed some observation, recategorised the data then made some summary statistics."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nWarning: package 'here' was built under R version 4.4.2\n\n\nhere() starts at C:/Users/kkdor/Desktop/GitHub_Work/DoreenKalembe-MADA-portifolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\n\nWarning: package 'skimr' was built under R version 4.4.2\n\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          3     \n_______________________          \nColumn type frequency:           \n  factor                   1     \n  numeric                  2     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Doreen Kalembe Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \n\nWarning: package 'skimr' was built under R version 4.4.2\n\nlibrary(here) #to set paths\n\nWarning: package 'here' was built under R version 4.4.2\n\n\nhere() starts at C:/Users/kkdor/Desktop/GitHub_Work/DoreenKalembe-MADA-portifolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook. We can observe that two new variables are added, waist-size and eye-color.\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n4 waist-size      size of the waist in inches           numeric value &gt;0 or NA\n5 eye-color       color of the individuals eye          character variable    \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height       &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"…\n$ Weight       &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender       &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"…\n$ `Waist-size` &lt;dbl&gt; 32, 45, 40, 26, 27, 55, 42, 25, 34, 55, 43, 34, 30, 24\n$ `Eye-color`  &lt;chr&gt; \"blue\", \"black\", \"green\", \"brown\", \"blue\", \"green\", \"blac…\n\nsummary(rawdata)\n\n    Height              Weight          Gender            Waist-size   \n Length:14          Min.   :  45.0   Length:14          Min.   :24.00  \n Class :character   1st Qu.:  55.0   Class :character   1st Qu.:27.75  \n Mode  :character   Median :  70.0   Mode  :character   Median :34.00  \n                    Mean   : 602.7                      Mean   :36.57  \n                    3rd Qu.:  90.0                      3rd Qu.:42.75  \n                    Max.   :7000.0                      Max.   :55.00  \n                    NA's   :1                                          \n  Eye-color        \n Length:14         \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender `Waist-size` `Eye-color`\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;      \n1 180        80 M                32 blue       \n2 175        70 O                45 black      \n3 sixty      60 F                40 green      \n4 178        76 F                26 brown      \n5 192        90 NA               27 blue       \n6 6          55 F                55 green      \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nEye-color\n0\n1\n4\n5\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55.00\n70\n90.00\n7000\n▇▁▁▁▁\n\n\nWaist-size\n0\n1.00\n36.57\n10.40\n24\n27.75\n34\n42.75\n55\n▇▅▃▃▃\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nEye-color\n0\n1\n4\n5\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nWaist-size\n0\n1.00\n36.31\n10.77\n24\n27.00\n34\n43\n55\n▇▅▂▃▃\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nEye-color\n0\n1\n4\n5\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nWaist-size\n0\n1.00\n36.31\n10.77\n24\n27.00\n34\n43\n55\n▇▅▂▃▃\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nEye-color\n0\n1\n4\n5\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nWaist-size\n0\n1\n34.00\n9.70\n24\n26.5\n32\n38\n55\n▇▅▂▂▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nEye-color\n0\n1\n4\n5\n0\n4\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nWaist-size\n0\n1\n34.00\n9.70\n24\n26.5\n32\n38\n55\n▇▅▂▂▂\n\n\n\n\n\nNow checking the new variables. We need to convert Eye-color as a factor as it is loaded as character, and also rename the variable. Similarly, the variable Waist-size will also be renamed as waistsize. The “-” symbol in variable names is not reccommended and causes trouble in reading.\n\nd3 &lt;- d3 %&gt;%\n  rename(eyecolor = \"Eye-color\", waistsize = \"Waist-size\")  \nd3$eyecolor &lt;- as.factor(d3$eyecolor) \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\neyecolor\n0\n1\nFALSE\n4\nbro: 4, bla: 3, blu: 2, gre: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nwaistsize\n0\n1\n34.00\n9.70\n24\n26.5\n32\n38\n55\n▇▅▂▂▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\neyecolor\n0\n1\nFALSE\n4\nbla: 3, bro: 3, gre: 2, blu: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nwaistsize\n0\n1\n34.78\n10.52\n24\n26\n32\n42\n55\n▇▃▂▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above. We will assign the dataframe name processeddata2 as we already have a dataframe named processeddata\n\nprocesseddata2 &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file (processeddata2.rds) . I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\nsaveRDS(processeddata2, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Doreen Kalembe Data Analysis Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Doreen Kalembe Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "",
    "text": "PRASANGA PAUDEL contributed to this exercise.\nPRASANGA PAUDEL contributed to this exercise.\nThe structure below is one possible setup for a data analysis project (including the course project). For a manuscript, adjust as needed. You don’t need to have exactly these sections, but the content covering those sections should be addressed.\nThis uses MS Word as output format. See here for more information. You can switch to other formats, like html or pdf. See the Quarto documentation for other formats.\nWarning: package 'here' was built under R version 4.4.2"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "1.1 General Background Information",
    "text": "1.1 General Background Information\nProvide enough background on your topic that others can understand the why and how of your analysis"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "1.2 Description of data and data source",
    "text": "1.2 Description of data and data source\nDescribe what the data is, what it contains, where it is from, etc. Eventually this might be part of a methods section. The data contains 15 observations and five variables. I added two more variables that is eye color which is a character variable and waist size which is a numeric variable showing the waist size of each individual plus their individual eye color. ## Questions/Hypotheses to be addressed State the research questions you plan to answer with this analysis.\nTo cite other work (important everywhere, but likely happens first in introduction), make sure your references are in the bibtex file specified in the YAML header above (here dataanalysis_template_references.bib) and have the right bibtex key. Then you can include like this:\nExamples of reproducible research projects can for instance be found in (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, Shen, & Handel, 2020)"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.1 Data aquisition",
    "text": "2.1 Data aquisition\nAs applicable, explain where and how you got the data. If you directly import the data from an online source, you can combine this section with the next."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.2 Data import and cleaning",
    "text": "2.2 Data import and cleaning\nWrite code that reads in the file and cleans it so it’s ready for analysis. Since this will be fairly long code for most datasets, it might be a good idea to have it in one or several R scripts. If that is the case, explain here briefly what kind of cleaning/processing you do, and provide more details and well documented code somewhere (e.g. as supplement in a paper). All materials, including files that contain code, should be commented well so everyone can follow along."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.3 Statistical analysis",
    "text": "2.3 Statistical analysis\nExplain anything related to your statistical analyses."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.1 Exploratory/Descriptive analysis",
    "text": "3.1 Exploratory/Descriptive analysis\nUse a combination of text/tables/figures to explore and describe your data. Show the most important descriptive results here. Additional ones should go in the supplement. Even more can be in the R and Quarto files that are part of your project.\nTable 1 shows a summary of the data.\nNote the loading of the data providing a relative path using the ../../ notation. (Two dots means a folder up). You never want to specify an absolute path like C:\\ahandel\\myproject\\results\\ because if you share this with someone, it won’t work for them since they don’t have that path. You can also use the here R package to create paths. See examples of that below. I recommend the here package, but I’m showing the other approach here just in case you encounter it.\n\n\n\n\nTable 1: Data summary table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_type\nskim_variable\nn_missing\ncomplete_rate\nfactor.ordered\nfactor.n_unique\nfactor.top_counts\nnumeric.mean\nnumeric.sd\nnumeric.p0\nnumeric.p25\nnumeric.p50\nnumeric.p75\nnumeric.p100\nnumeric.hist\n\n\n\n\nfactor\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nnumeric\nHeight\n0\n1\nNA\nNA\nNA\n165.66667\n15.97655\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nnumeric\nWeight\n0\n1\nNA\nNA\nNA\n70.11111\n21.24526\n45\n55\n70\n80\n110\n▇▂▃▂▂"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.2 Basic statistical analysis",
    "text": "3.2 Basic statistical analysis\nTo get some further insight into your data, if reasonable you could compute simple statistics (e.g. simple models with 1 predictor) to look for associations between your outcome(s) and each individual predictor variable. Though note that unless you pre-specified the outcome and main exposure, any “p&lt;0.05 means statistical significance” interpretation is not valid.\nFigure 1 shows a scatterplot figure produced by one of the R scripts.\n\n\n\n\n\n\n\n\nFigure 1: Height and weight stratified by gender."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.3 Full analysis",
    "text": "3.3 Full analysis\nUse one or several suitable statistical/machine learning methods to analyze your data and to produce meaningful figures, tables, etc. This might again be code that is best placed in one or several separate R scripts that need to be well documented. You want the code to produce figures and data ready for display as tables, and save those. Then you load them here.\nExample Table 2 shows a summary of a linear model fit.\n\n\n\n\nTable 2: Linear model fit table.\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n161.8888273\n29.7273541\n5.4457866\n0.0055218\n\n\nwaistsize\n0.1011921\n0.7445423\n0.1359119\n0.8984565\n\n\neyecolorblue\n14.8730247\n21.4500565\n0.6933793\n0.5262294\n\n\neyecolorbrown\n-9.7222068\n16.4456051\n-0.5911736\n0.5861941\n\n\neyecolorgreen\n8.3105073\n17.1028791\n0.4859128\n0.6524469"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.1 Summary and Interpretation",
    "text": "4.1 Summary and Interpretation\nSummarize what you did, what you found and what it means."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.2 Strengths and Limitations",
    "text": "4.2 Strengths and Limitations\nDiscuss what you perceive as strengths and limitations of your analysis."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.3 Conclusions",
    "text": "4.3 Conclusions\nWhat are the main take-home messages?\nInclude citations in your Rmd file using bibtex, the list of references will automatically be placed at the end\nThis paper (Leek & Peng, 2015) discusses types of analyses.\nThese papers (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, et al., 2020) are good examples of papers published using a fully reproducible setup similar to the one shown in this template.\nNote that this cited reference will show up at the end of the document, the reference formatting is determined by the CSL file specified in the YAML header. Many more style files for almost any journal are available. You also specify the location of your bibtex reference file in the YAML. You can call your reference file anything you like, I just used the generic word references.bib but giving it a more descriptive name is probably better.\ncode for the two figures. Comparing how Height varies with weight\n\n#path to data\n#note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n\n#load data. \nmydata &lt;- readRDS(data_location)\nfigure1 &lt;- ggplot(mydata, aes(x = Weight, y = Height)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", color = \"blue\", se = TRUE)+\n  labs(title = \"Relationship between Weight and Height\")\n\nFigure for the second figure.\ncomparing the height with respect to the gender of an individual.\n\nfigure2 &lt;- ggplot(mydata, aes(x = Gender, y = Height, fill = Gender)) +\n  geom_boxplot()+\n  labs(title = \"Relationship between Gender and Height\")\n\ntable of the combined comparison.\n\n# fit linear model using height as outcome, weight and gender as predictor\n\nlmfit2 &lt;- lm(Height ~ Weight + Gender, mydata)  \n\n# place results from fit into a data frame with the tidy function\nlmtable2 &lt;- broom::tidy(lmfit2)\n\n#look at fit results\nprint(lmtable2)\n\n# A tibble: 4 × 5\n  term        estimate std.error statistic p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)  149.       23.4       6.38  0.00140\n2 Weight         0.262     0.351     0.747 0.489  \n3 GenderM       -2.12     15.5      -0.137 0.897  \n4 GenderO       -4.76     19.0      -0.251 0.812  \n\n\nThe average height for the reference group (females) when Weight = 0 is 149.3 cm.\nWeight: For each 1-unit increase in weight, height increases by 0.262cm, keeping gender constant. However this was not statitically significant with P-value (0.4887). This suggests that weight does not have a significant linear relationship with height.\nGenderM (Male): Males are, on average, 2.124 cm shorter than the reference group (females) when weight is held constant. However this was not statistically significant with P-value = 0.8967 &gt; 0.05), suggesting no significant height difference between males and females.\nGenderO (Other): Individuals in the “Other” gender category are, on average, 4.764 cm shorter than females when weight is held constant. However this was not statistically significant with P-value = 0.812 &gt; 0.05, suggesting no significant height difference between “Other” and females."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#new-figure-1-box-plot",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#new-figure-1-box-plot",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.1 New Figure 1: Box Plot",
    "text": "5.1 New Figure 1: Box Plot\nThe following figure shows the boxplot of Eye-color and Height.\n\n\n\n\n\n\n\n\nFigure 2: Height and Eye-color boxplot.\n\n\n\n\n\nIt can be seen that height of different eye-colored individuals are not significantly different, although the the average height are different across the eye-color."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#new-figure-2-scatterplot",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#new-figure-2-scatterplot",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.2 New Figure 2: Scatterplot",
    "text": "5.2 New Figure 2: Scatterplot\nThe following figure shows the scatterplot of Waist-size against Weight.\n\n\n\n\n\n\n\n\nFigure 3: Waist-size Vs Weight scatterplot .\n\n\n\n\n\nIt can be seen that age and weight are somewhat positively correlated."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Doreen Kalembe Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  }
]